Library: com.livecode.list

Type: module

Summary: This library consists of the operations on lists included in the standard library of LiveCode Builder.


Name: SpliceIntoElementOfList

Type: statement

Syntax:     splice <Source> into element <Index> of <Target>

Summary:
Removes the element of <Target> at <Index> and inserts each of the elements of <Source> into
                    <Target> at <Index>.

Source: An expression which evaluates to a list.

Index: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put the empty list into tVar

variable tCount as Number
put 1 into tCount
repeat 3 times
	push tCount onto tVar
end repeat

variable tVar2 as List
push "this is unwanted" onto tVar2
push 4 onto tVar2

splice tVar into element 1 of tVar2 -- tVar2 contains the list [1,2,3,4]

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList into element 1 of tList2``` results in the removal of element 1 of tList2 and the insertion of tList **as an element**, i.e. tList2 becomes the list [tList,element 2 of tList2, element 3 of tList2 ...]

>*Note:* It is an error if <Index> is out of range.

Tags: Lists




Name: ListIsNotList

Type: operator

Syntax:     <Left> is not <Right>

Summary: Determines whether <Left> and <Right> are equal or not.

Left: An expression which evaluates to a list.

Right: An expression which evaluates to a list.

Returns: Returns true if <Left> is not identical to <Right>.

Example:
variable tList as List
put ["a", "b", "c"] into tList
variable tIsNot as Boolean

put tList is not ["A", "b", "c"] into tIsNot -- tIs is true

Description:
Two lists are not equal if any corresponding elements are of non-comparable types, or if the default equality of that type does not holds between the elements.
In particular, this means that comparison between string elements is case sensitive.

Tags: Lists




Name: HeadOfList

Type: operator

Syntax:     the head of <Target>

Summary: Returns the first element of <Target>.

Target: An expression which evaluates to a list.

Returns: The first element of <Target>

Example:
variable tVar as List
put the empty list into tVar
push "first element" onto tVar

variable tResult as Boolean
if the head of tVar is "first element" then
	put "success" into tResult
end if

Description:
Returns the first element of the list <Target> without modifying <Target>.
```	the head of tVar```
is equivalent to using the <IndexedElementOfList> operator with index 1
```	tVar[1]```

References: IndexedElementOfList(operator)

Tags: Lists




Name: PushOntoList

Type: statement

Syntax:     push <Value> onto ( front of | back of ) <Target>

Summary: Pushes <Value> onto <Target>.

Value: Any expression.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put the empty list into tVar
push "something" onto tVar
push "something else" onto front of tVar

variable tResult as String
if tVar[1] is "something else" then
	put "success" into tResult
end if

Description:
When <Value> is pushed onto <Target>, <Value> (by default) becomes the tail of the list, with an index one greater than the previous tail.
Use the 'front of' variant to push onto the front of a list instead.

Tags: Lists




Name: ListIsList

Type: operator

Syntax:     <Left> is <Right>

Summary: Determines whether <Left> and <Right> are equal or not.

Left: An expression which evaluates to a list.

Right: An expression which evaluates to a list.

Returns: Returns true if <Left> is identical to <Right>.

Example:
variable tList as List
put ["a", "b", "c"] into tList
variable tIs as Boolean

put tList is ["A", "b", "c"] into tIs -- tIs is false
put tList is element 1 to -1 of tList into tIs -- tIs is true

Description:
Two lists are equal if each corresponding element is of comparable type, and if the default equality of that type holds between the elements.
In particular, this means that comparison between string elements is case sensitive.

Tags: Lists




Name: ListOffset

Type: operator

Syntax: 	the ( first | last ) offset of <Needle> in <Haystack>

Summary: Find the first or last occurrence of <Needle> within <Haystack>

Needle: An expression which evaluates to a list.

Target: An expression which evaluates to a list.

Returns: Returns the index from the start of <Haystack>.

Example:
variable tVar as List
variable tOffset as Number
put ["a", "b", "c", "d", "b", "c"]
put the offset of ["b","c"] in tVar into tOffset
-- tOffset contains 2

put the last offset of ["b", "c"] in tVar into tOffset
-- tOffset contains 5

Description:
Use `the offset of` to find where a particular sub-list occurs within
a list.  <Haystack> is scanned for a sequence of elements that are
equal to the elements of <Needle>, and the position of the start of
the sequence found is returned.  If neither the "first offset" nor
"last offset" are specified, the index of the first matching sub-list
found is returned.  If no sub-list of <Haystack> is equal to <Needle>,
the return value is 0.

Tags: Lists




Name: TailOfList

Type: operator

Syntax:     the tail of <Target>

Summary: Returns the last element of <Target>.

Target: An expression which evaluates to a list.

Returns: The last element of <Target>

Example:
variable tVar as List
put the empty list into tVar
push "first element" onto tVar
push "last element" onto tVar

variable tResult as String
if the tail of tVar is "last element" then
	put "success" into tResult
end if

Description:
Returns the first element of the list <Target> without modifying <Target>.
```	the tail of tVar```
is equivalent to using the <IndexedElementOfList> operator with index -1
```	tVar[-1]```

References: IndexedElementOfList(operator)

Tags: Lists




Name: ListIndex

Type: operator

Syntax: 	the ( first | last ) index of <Needle> in <Haystack>

Summary: Find the first or last occurrence of <Needle> within <Haystack>

Needle: An expression which evaluates to any value.

Target: An expression which evaluates to a list.

Returns: Returns the index from the start of <Haystack>.

Example:
variable tVar as List
variable tOffset as Number
put ["a", "b", "c", "d", "b"]
put the index of "b" in tVar into tOffset
-- tOffset contains 2

put the last index of "b" in tVar into tOffset
-- tOffset contains 5

Description:
Use `the index of` to find where particular elements occur within a
list.  <Haystack> is scanned for an element that is equal to <Needle>,
and the position of the element found is returned.  If neither the
"first index" nor "last index" are specified, the index of the first
element found is returned.  If no element of <Haystack> is equal to
<Needle>, the return value is 0.

Tags: Lists




Name: ReverseElementsOfList

Type: statement

Syntax: 	reverse <Target>

Summary: Reverse a list

Target: A list

Example:
variable tList
put [1, 2, 3] into tList
reverse tList
expect that tList is [3, 2, 1]

Description: Reverses the order of elements in the <Target>.

Tags: Lists




Name: PopList

Type: statement

Syntax:     pop ( front of | back of ) <Source>

Summary: Pops the last element from <Source> into <Target>

Source: An expression which evaluates to a list.

Target: An expression which evaluates to a container.

Example:
variable tVar as List
put the empty list into tVar
push "something" onto tVar
push "something else" onto tVar

variable tPopped as String
pop tVar into tPopped -- tPopped contains "something else"

Example:
variable tList as List
put [1,2,3] into tList
variable tNum as Number
pop front of tList into tNum -- tNum is 1, tList is [2,3]

Description:
When <Source> is popped into <Target>, the last element of the list <Source> is removed and put into the container <Target>.
Use the 'front of' variant to pop from the front of a list instead.

Tags: Lists




Name: FirstElementOf

Type: operator

Syntax: 	the first element of <Target>

Summary: Designates the first element in <Target>.

Target: An expression which evaluates to a list.

Description:
Either locates the first element for use as the target container of another operation, or evaluates the first element as the source of another operation.

>*Note:* It is an error if <Target> is empty.

Tags: Lists




Name: ListContainsElements

Type: operator

Syntax:     <Target> contains <Needle>

Summary: Determines if <Target> contains <Needle> as a subsequence.

Needle: Any expression which evaluates to a list.

Target: An expression which evaluates to a list.

Returns: Returns true if <Target> contains <Needle>.

Example:
variable tList as List
put [ "a", "b", "c", "d" ] into tList

variable tContains as Boolean

// put tList contains tList[1] into tContains -- error: tList[1] is not a list 

put tList contains element 1 to 2 of tList into tContains -- tContains is true

Description:
<Target> contains <Needle> if and only if the elements of <Needle> occur as a subsequence of the elements of <Target>.

>*Note:* Since "" is a subsequence of elements of every list, every list contains the empty list.

Tags: Lists




Name: ListBeginsWithList

Type: operator

Syntax:     <Source> begins with <Prefix>

Summary: Determines whether <Source> begins with <Prefix>

Prefix: An expression which evaluates to a list.

Source: An expression which evaluates to a list.

Returns: Returns true if <Source> begins with <Prefix>.

Example:
variable tVar as List
put [1, 2, 3, 4, 5] into tVar

variable tBegins as Boolean
// put tList begins with tList[1] into tBegins -- error: tList[1] is not a list 

put tList begins with [1, 2] into tBegins -- tBegins is true

Description:
<Source> begins with <Prefix> if and only if the elements of <Prefix> occur as an initial subsequence of the elements of <Source>.

>*Note:* Since the empty list is an initial subsequence of every list, every list begins with the empty list.

Tags: Lists




Name: IndexedElementOfList

Type: operator

Syntax:     <Target> [ <Index> ]

Summary: Designates the element at index <Index> in <Target>.

Synonym: SingletonElementOf

Index: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put [1,2,3] into tVar
put "A" into tVar[1] -- tVar is ["A",2,3]

variable tNum as Number
put tVar[2] into tNum -- tNum is 2

Description:
Either locates the element container at the given index for use as the target container of another operation, or evaluates the element at the given index as the source of another operation.

>*Note:* It is an error if <Index> is out of range.

Tags: Lists




Name: RepeatForEachElementInList

Type: iterator

Syntax:     element <Iterand>

Summary: Repeat over the elements of a list

Iterand: Any variable of appropriate type.

Example:
    variable tList as List
    put [1, 1, 2, 3, 5, 8, 13] into tList

    variable tRelist as List
    variable tElement as any
    put the empty list into tRelist

    repeat for each element tElement in tList
        push tElement onto tRelist
    end repeat

    // tRelist is the same as tList

Description:
Use repeat for each to perform an operation on each element of a list. On each iteration, the Iterand will contain the next element of the list being iterated over.
>*Note:* If <Iterand> is typed, then an error will be thrown if the list being iterated over contains any elements of a different type.

Tags: Lists, Control structures




Name: SpliceIntoRangeOfList

Type: statement

Syntax:     splice <Source> into element <Start> to <Finish> of <Target>

Summary:
Removes the elements of <Target> from <Start > to <Finish> and inserts each of the elements of
                    <Source> into <Target> at <Start>.

Source: An expression which evaluates to a list.

Start: An expression which evaluates to a valid integer index of <Target>.

Finish: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put the empty list into tVar

variable tCount as Number
put 1 into tCount
repeat 3 times
	push tCount onto tVar
end repeat

variable tVar2 as List
push "these" onto tVar2
push "are" onto tVar2
push "unwanted" onto tVar2
push 4 onto tVar2

splice tVar into element 1 to 3 of tVar2 -- tVar2 contains the list [1,2,3,4]

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList into element 1 to 3 of tList2``` results in the removal of elements 1 to 3 of tList2 and the insertion of tList **as an element**, i.e. tList2 becomes the list [tList,element 4 of tList2, element 5 of tList2 ...]

>*Note:* It is an error if either <Start> or <Finish> is out of range.

Tags: Lists




Name: DeleteLastElementOf

Type: statement

Syntax: 	delete the last element of <Target>

Summary: Deletes the last element of <Target>.

Target: A list container.

Description:
Removes the last element of <Target>.

>*Note:* It is an error if <Target> is the empty list.

Tags: Lists




Name: ListIndexAfter

Type: operator

Syntax: 	the ( first | last ) index of <Needle> after <After> in <Haystack>

Summary: Find the first or last occurrence of <Needle> within the tail of <Haystack>

Needle: An expression which evaluates to any value.

After: An expression which evaluates to a valid index in Target.

Target: An expression which evaluates to a list.

Returns: Returns the index in <Haystack> relative to <After>.

Example:
variable tVar as List
variable tOffset as Number
put ["a", "b", "c", "d", "b"]
put the index of "b" after 1 in tVar into tOffset
--tOffset contains 2

put the last index of "b" after 2 in tVar into tOffset
--tOffset contains 5

Description:
Use `the index of… after` to find where particular elements occur
within a list.  Starting from but not including the position <After>,
<Haystack> is scanned for an element that is equal to <Needle>, and
the position of the element found is returned.  If no element of
<Haystack> is equal to <Needle>, the return value is 0.

Tags: Lists




Name: ListOffsetAfter

Type: operator

Syntax: 	the ( first | last ) offset of <Needle> after <After> in <Haystack>

Summary: Find the first or last occurrence of <Needle> within the tail of <Haystack>

Needle: An expression which evaluates to any list.

After: An expression which evaluates to a valid index in Target.

Target: An expression which evaluates to a list.

Returns: Returns the index in <Haystack> relative to <After>.

Example:
variable tVar as List
variable tOffset as Number
put ["a", "b", "c", "d", "b", "c"]
put the offset of ["b","c"] after 1 in tVar into tOffset
--tOffset contains 2

put the last offset of ["b","c"] after 1 in tVar into tOffset
--tOffset contains 5

Description:
Use `the offset of… after` to find where a particular sub-list occurs
within a list.  Starting from but not including the position <After>,
<Haystack> is scanned for an sequence of elements that are equal to
the elements of <Needle>, and the position of the start of the
sequence found is returned.  If neither the "first offset" nor "last
offset" are specified, the position of the first matching sub-list
found is returned.  If no sub-list of <Haystack> starting after the
position <After> is equal to <Needle>, the return value is 0.

Tags: Lists




Name: ConcatenateLists

Type: operator

Syntax:     <Left> & <Right>

Summary: Concatenate two lists.

LeftList: The List to go at the start of the resulting list.

RightList: The List to go at the end of the resulting list.

Returns: A newly created List built from <LeftList> and <RightList>.

Example:
variable tVar
put ["a", "b"] & ["c", "d"] into tVar
-- tVar contains ["a", "b", "c", "d"]

Description:
Returns a newly-created list consisting of the elements of <LeftList>
followed by the elements of <RightList>.

Tags: Lists




Name: SpliceAfterElementOfList

Type: statement

Syntax:     splice <Source> after element <Index> of <Target>

Summary: Inserts each of the elements of <Source> into <Target> after element at index <Index>.

Source: An expression which evaluates to a list.

Index: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put the empty list into tVar

variable tCount as Number
put 2 into tCount
repeat 3 times
	push tCount onto tVar
end repeat

variable tVar2 as List
push 1 onto tVar2
push 5 onto tVar2

splice tVar after element 1 of tVar2 -- tVar2 contains the list [1,2,3,4,5]

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList after element 1 of tList2``` results in the insertion of tList **as an element**, i.e. tList2 becomes the list [element 1 of tList2,tList,element 2 of tList2, element 3 of tList2 ...]

>*Note:* It is an error if <Index> is out of range.

Tags: Lists




Name: SingletonElementOfList

Type: operator

Syntax: 	element <Index> of <Target>

Summary: Designates the element at index <Index> in <Target>.

Index: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put [1,2,3] into tVar
put "A" into element 1 of tVar -- tVar is ["A",2,3]

variable tNum as Number
put element 2 of tVar into tNum -- tNum is 2

Description:
Either locates the element container at the given index for use as the target container of another operation, or evaluates the element at the given index as the source of another operation.

>*Note:* It is an error if <Index> is out of range.

Tags: Lists




Name: RangeElementsOfList

Type: operator

Syntax: 	element <Start> to <Finish> of <Target>

Summary: Designates the elements between indices <Start> and <Finish> in <Target>.

Start: An expression which evaluates to a valid integer index of <Target>.

Finish: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tList as List
put [1,2,3] into tList

put tList into element 1 to 2 of tList -- tList is [[1,2,3],3]

Description:
Either locates the element containers between the given indices for use as a list container for the target of another operation, or evaluates the elements between the given indices as a list.

>*Note:* It is an error if either <Start> or <Finish> are out of range.

>*Note:* If a list is the source of ``put tList into element 1 to 3 of tOtherList```, then tList is *not* inserted element-wise. The entire list is inserted as an element, so that element 1 of tOtherList is tList.

Tags: Lists




Name: ListEndsWithList

Type: operator

Syntax:     <Source> ends with <Suffix>

Summary: Determines whether <Source> ends with <Suffix>

Prefix: An expression which evaluates to a list.

Source: An expression which evaluates to a list.

Returns: Returns true if <Source> ends with <Suffix>.

Example:
variable tVar as List
put [1, 2, 3, 4, 5] into tVar

variable tEnds as Boolean
// put tList ends with tList[5] into tEnds -- error: tList[5] is not a list 

put tList ends with element 1 to 5 of tList into tEnds -- tEnds is true

Description:
<Source> ends with <Suffix> if and only if the elements of <Suffix> occur as a final subsequence of the elements of <Source>.

>*Note:* Since the empty list is a final subsequence of every list, every list ends with the empty list.

Tags: Lists




Name: ElementIsInList

Type: operator

Syntax:     <Needle> is in <Target>

Summary: Determines if a given element is in <Target>

Needle: Any expression.

Target: An expression which evaluates to a list.

Returns: Returns true if <Needle> can be found among the elements of <Target>.

Example:
variable tList as List
put [ "a", "b", "c", "d" ] into tList

variable tIsIn as Boolean
put "a" is in tList into tIsIn -- tIsIn contains true

Description: <Needle> must be an element of <Target> rather than a sublist, or contained within a list element of <Target>.

Tags: Lists




Name: ListIndexBefore

Type: operator

Syntax: 	the ( first | last ) index of <Needle> before <Before> in <Haystack>

Summary: Find the first or last occurrence of <Needle> within the head of <Haystack>

Needle: An expression which evaluates to any value.

Before: An expression which evaluates to a valid index in Target.

Target: An expression which evaluates to a list.

Returns: Returns the index in <Haystack>.

Example:
variable tVar as List
variable tOffset as Number
put ["a", "b", "c", "d", "b"]
put the index of "b" before 2 in tVar into tOffset
--tOffset contains 0

put the first index of "b" before 5 in tVar into tOffset
--tOffset contains 2

Description:
Use `the index of… before` to find where particular elements occur
within a list.  <Haystack> is scanned for an element that is equal to
<Needle>, stopping before the position <Before>, and the position of
the element found is returned.  If no element of <Haystack> is equal
to <Needle>, the return value is 0.  If neither "first" nor "last" is
specified, the last matching element is found.

Tags: Lists




Name: LastElementOf

Type: operator

Syntax: 	the last element of <Target>

Summary: Designates the last element in <Target>.

Target: An expression which evaluates to a list.

Description:
Either locates the first element for use as the target container of another operation, or evaluates the first element as the source of another operation.

>*Note:* It is an error if <Target> is empty.

Tags: Lists




Name: DeleteRangeElementOf

Type: statement

Syntax: 	delete element <Start> to <Finish> of <Target>

Summary: Deletes the elements between indices <Start> and <Finish> in <Target>.

Start: An expression which evaluates to a valid integer index of <Target>.

Finish: An expression which evaluates to a valid integer index of <Target>.

Target: A list container.

Description:
Removes the elements between the given indices from the list.

>*Note:* It is an error if either <Start> or <Finish> are out of range.

Tags: Lists




Name: SpliceBeforeElementOfList

Type: statement

Syntax:     splice <Source> before element <Index> of <Target>

Summary: Inserts each of the elements of <Source> into <Target> before element at index <Index>.

Source: An expression which evaluates to a list.

Index: An expression which evaluates to a valid integer index of <Target>.

Target: An expression which evaluates to a list.

Example:
variable tVar as List
put the empty list into tVar

variable tCount as Number
put 2 into tCount
repeat 3 times
	push tCount onto tVar
end repeat

variable tVar2 as List
push 1 onto tVar2
push 5 onto tVar2

splice tVar before element 2 of tVar2 -- tVar2 contains the list [1,2,3,4,5]

Description:
Use the splice syntax to insert the elements of one list into another list. 

>*Note:* ```put tList before element 2 of tList2``` results in the insertion of tList **as an element**, i.e. tList2 becomes the list [element 1 of tList2,tList,element 2 of tList2, element 3 of tList2 ...]

>*Note:* It is an error if <Index> is out of range.

Tags: Lists




Name: DeleteSingletonElementOf

Type: statement

Syntax: 	delete element <Index> of <Target>

Summary: Deletes the element at index <Index> in <Target>.

Index: An expression which evaluates to a valid integer index of <Target>.

Target: A list container.

Description:
Removes the element at the given index from the list.

>*Note:* It is an error if either <Index> is out of range.

Tags: Lists




Name: ListOffsetBefore

Type: operator

Syntax: 	the ( first | last ) offset of <Needle> before <Before> in <Haystack>

Summary: Find the first or last occurrence of <Needle> within the head of <Haystack>

Needle: An expression which evaluates to List.

Before: An expression which evaluates to a valid index in Target.

Target: An expression which evaluates to a List.

Returns: Returns the index in <Haystack>.

Example:
variable tVar as List
variable tOffset as Number
put ["a", "b", "c", "d", "b","c"]
put the offset of ["b","c"] before 5 in tVar into tOffset
--tOffset contains 2

put the first offset of ["b","c"] before 6 in tVar into tOffset
--tOffset contains 2

Description:
Use `the offset of… before` to find where a particular sub-list occurs
within a list.  <Haystack> is scanned for a sequence of elements that
are equal to the elements of <Needle>, stopping before the position
<Before>, and the position of the start of the sequence found is
returned.  If no sub-list of <Haystack> before the position <Before>
is equal to <Needle>, the return value is 0.  If neither "first" nor
"last" is specified, the last matching subsequence is found.

Tags: Lists




Name: EmptyList

Type: expression

Syntax: 	the empty list

Summary: Designates the list of length zero.

Example:
variable tVar as List
variable tCount as Number
put the empty list into tVar
put the number of elements in tVar into tCount -- tCount is 0

Description: Use ```the empty list``` to initialise a list variable.

Tags: Lists




Name: DeleteFirstElementOf

Type: statement

Syntax: 	delete the first element of <Target>

Summary: Deletes the first element of <Target>.

Target: A list container.

Description:
Removes the first element of <Target>.

>*Note:* It is an error if <Target> is the empty list.

Tags: Lists




Name: CountElementsOfList

Type: operator

Syntax:     the number of elements in <Target>

Summary: Returns the number of elements in <Target>

Target: An expression which evaluates to a list.

Returns: The number of elements in the list <Target>.

Example:
variable tVar as List
put [1,2,3,4,5] into tVar
variable tNum as Number
put the number of elements in tVar into tNum -- tNum is 5

Description: Returns the number of elements in the list.

Tags: Lists




