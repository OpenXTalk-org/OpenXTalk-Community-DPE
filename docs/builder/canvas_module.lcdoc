Library: com.livecode.canvas

Type: module

Summary: This module specifies the syntax definitions and bindings for canvas drawing operations in Extension Builder.


Name: CanvasOperationRotate

Type: statement

Syntax: 	rotate <mCanvas> by <mRotation>

Summary: Apply a rotation to a canvas.

mRotation: An expression which evaluates to a number.

mCanvas: An expression which evaluates to a canvas.

Description: Rotates the transform of <mCanvas> by <mRotation> degrees.

Example:
// Rotate the canvas
rotate this canvas by 45

Tags: Canvas




Name: PatternMakeTransformed

Type: operator

Syntax: 	pattern with <mImage> transformed by <mTransform>

Summary: Creates a new transformed pattern paint.

mImage: An expression which evaluates to an image.

mTransform: An expression which evaluates to a transform.

Returns: A new pattern paint based on <mImage> with the specified transform applied.

Example:
// Load the pattern image.
variable tImage
put image from file "images/backgroundpattern.png" into tImage

// Set up the pattern transform
variable tTransform
put transform from matrix [0,2,-2,0,0,0] into tTransform

// Create a new pattern paint, applying a transform to the image
variable tPaint
put pattern with tImage transformed by tTransform into tPaint

Tags: Canvas




Name: GradientStopPropertyOffset

Type: operator

Syntax: 	the offset of <mStop>

Summary: The offset of a gradient stop value.

mStop: An expression which evaluates to a gradient stop.

Description: The offset of <mStop>.

Example:
variable tStop
put gradient stop at 0 with color [1,1,1] into tStop

// Get the offset of a stop
variable tOffset
put the offset of tStop into tOffset

// Move the stop to a new offset
set the offset of tStop to 0.75

Tags: Canvas




Name: CanvasPropertyOpacity

Type: operator

Syntax: 	the opacity of <mCanvas>

Summary: The current opacity setting of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The opacity of drawing operations on <mCanvas>, as a number between 0 and 1.

Example:
// make subsequent drawing operations render with half transparency
set the opacity of this canvas to 0.5

Tags: Canvas




Name: EffectPropertyAngle

Type: operator

Syntax: 	the angle of <mEffect>

Summary: The angle of an effect.

mEffect: An expression which evaluates to an effect.

Description: The angle of <mEffect> as a number of degrees. Angle applies to inner shadow, and outer shadow effect types

Example:
// Create an effect with angle 60
variable tProps as Array
put the empty array into tProps

put 60 into tProps["angle"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Set the effect angle
set the angle of tEffect to 30

Tags: Canvas




Name: GradientPropertyRamp

Type: operator

Syntax: 	the ramp of <mGradient>

Summary: The ramp of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The ramp of <mGradient>. The ramp is a list of gradient stops that describes the color transitions along the length of the gradient

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Get the gradient ramp
variable tRamp
put the ramp of tGradient into tRamp

// Change the color of the first stop
set the color of element 1 of tRamp to color [1,0,0]

// Set the new gradient ramp
set the ramp of tGradient to tRamp

Tags: Canvas




Name: FontOperationTextLayoutBounds

Type: operator

Syntax: 	the [ layout ] bounds of text <mText> with <mFont>

Summary: Measure text when drawn with a font.

mText: An expression which evaluates to a string.

mFont: An expression which evaluates to a font.

Returns: The bounding box of <mText> when drawn at point 0,0 with font <mFont>. Returns the bounds as a rectangle.

Example:
// Set up tFont as size 18 Arial
variable tFont as Font
put font "Arial" at size 18 into tFont

// Measure text with tFont
variable tBounds as Rectangle
put the bounds of text "Sample text" with tFont into tBounds

Description:
The layout bounds of the text, constructed from the ascent and descent values of the font, and the width of the text string.

>*Note:* The layout bounds is used to position blocks of text relative to each other, so the text may overlap these bounds.

Tags: Canvas




Name: CanvasPropertyFont

Type: operator

Syntax: 	the font of <mCanvas>

Summary: The current font of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The font used when drawing text on <mCanvas> as a font.

Example:
// Use 20pt Arial for text drawing on canvas
set the font of this canvas to font "Arial" at size 20

Tags: Canvas




Name: FontMakeWithStyle

Type: expression

Syntax: 	font <mName> with ( bold  | italic  | bold italic  ) style

Summary: Creates a new instance of the named font.

mName: An expression which evaluates to a string.

Returns: A new instance of the named font with style bold, italic, or bold italic, and the default size of 12pts.

Example:
// Create italic Arial font
variable tFont as Font
put font "Arial" with italic style into tFont

Tags: Canvas




Name: PathMakeWithRoundedRectangleWithRadii

Type: operator

Syntax: 	rounded rectangle path of <Rectangle> with radii <Radii>

Summary: Create a new rectangle path with elliptical corner rounding

Parameters:

Rectangle: A rectangle to create the path from

Radii: A list of the horizontal radius and vertical radius for rounding

Returns: A newly-created canvas path

Description:
Create a new rounded rectangle path based on <Rectangle>.

The <Radii> is a list of two numbers.  The first specifies the
horizontal rounding radius and the second specifies the vertical
rounding radius.

References: PathMakeWithRoundedRectangle

Tags: Canvas




Name: PathMakeWithArc

Type: operator

Syntax: 	arc path centered at <mCenter> with [ radius <mRadius> | radii <mRadii> ] from <mStartAngle> to <mEndAngle>

Summary: Creates a new path.

mCenter: An expression which evaluates to a point.

mRadius: An expression which evaluates to a number.

mRadii: An expression which evaluates to a list of numbers.

mStartAngle: An expression which evaluates to a number.

mEndAngle: An expression which evaluates to a number.

Returns: A new arc path.

Example:
// Create an elliptical arc path
variable tPath as Path
put arc path centered at point [100,100] with radii [100,75] from 0 to 270 into tPath

Example:
// Create a circular arc path
variable tPath as Path
put arc path centered at point [100,100] with radius 100 from 0 to 270 into tPath

Tags: Canvas




Name: PatternOperationRotate

Type: statement

Syntax: 	rotate <mPattern> by <mRotation>

Summary: Apply a rotation to a pattern.

mPattern: An expression which evaluates to a pattern.

mRotation: An expression which evaluates to a number of degrees.

Description: Rotates the transform of <mPattern> by <mRotation>

Example:
// Create a new pattern paint from an image file
variable tPattern
put pattern with image from file "images/pattern.png" into tPattern

// Rotate the pattern through 30 degrees
rotate tPattern by 30

Tags: Canvas




Name: PathOperationTranslate

Type: statement

Syntax: 	translate <mPath> by <mTranslation>

Summary: Apply a translation to a path.

mTranslation: An expression which evaluates to a list of numbers.

mPath: An expression which evaluates to a path.

Description: Translates <mPath> by <mTranslation>.

Example:
// Create a rectangle path
variable tPath as Path
put rectangle path of rectangle [10,10,210,60] into tPath

// Translate the path
translate tPath by [50,100]

Tags: Canvas




Name: PatternMake

Type: operator

Syntax: 	pattern with <mImage>

Summary: Creates a new pattern paint.

mImage: An expression which evaluates to an image.

Returns: A new pattern paint based on <mImage>.

Example:
// Load the pattern image.
variable tImage
put image from file "images/backgroundpattern.png" into tImage

// Create a new pattern based on the image
variable tPaint
put pattern with tImage into tPaint

Tags: Canvas




Name: PathOperationArcTo

Type: statement

Syntax: 	arc through <mThrough> to <mTo> with radius <mRadius> on <mPath>

Summary: Adds an arc to a path.

mThrough: An expression which evaluates to a point.

mTo: An expression which evaluates to a point.

mRadius: An expression which evaluates to a number.

mPath: An expression which evaluates to a path.

Description: Adds an arc between the points of a circle with radius <mRadius> tangent to the lines from the current point to <mThrough>, and from <mThrough> to <mTo>.

Example:
// Construct a path tracing out a rectangle with rounded bottom corners.
variable tPath
put the empty path into tPath

// Begin a new subpath
move to point [0, 0] on tPath

// Continue path with an arc to the bottom edge
arc through point [0, my height] to point [25, my height] with radius 25 on tPath

// Continue path with an arc to the right edge
arc through point [my width, my height] to point [my width, 0] with radius 25 on tPath

// Close the path with a line back to the starting point
close path on tPath

Tags: Canvas




Name: ImagePropertyHeight

Type: operator

Syntax: 	the height of <mImage>

Summary: The height of an image.

mImage: An expression which evaluates to an image.

Description: The height of the image in pixels.

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// Get the image height
variable tHeight as Integer
put the height of tImage into tHeight

Tags: Canvas




Name: PathMakeWithRoundedRectangleWithRadius

Type: operator

Syntax: 	rounded rectangle path of <mRect> with radius <mRadius>

Summary: Creates a new path.

mRect: An expression which evaluates to a rectangle.

mRadii: An expression which evaluates to a list of numbers.

mRadius: An expression which evaluates to a number.

Returns: A new rounded rectangle path.

Example:
// Create a rounded rectangle path
variable tPath as Path
put rounded rectangle path of rectangle [10,10,210,60] with radius 15 into tPath

Example:
// Create a rounded rectangle path with different horizontal & vertical radii
variable tPath as Path
put rounded rectangle path of rectangle [10,10,210,60] with radii [10,5] into tPath

Tags: Canvas




Name: GradientPropertyRepeat

Type: operator

Syntax: 	the repeat of <mGradient>

Summary: The repeat count of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The repeat count of <mGradient> as a number. This determines how many times the ramp is repeated over the length of the gradient.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Store the old gradient repeat count
variable tRepeat
put the repeat of tGradient into tRepeat

// Make the gradient repeat 3 times
set the repeat of tGradient to 3

Tags: Canvas




Name: CanvasOperationTransform

Type: statement

Syntax: 	transform <mCanvas> by <mTransform>

Summary: Apply a transform to a canvas.

mTransform: An expression which evaluates to a transform.

mCanvas: An expression which evaluates to a canvas.

Description: Concatenates the transform of <mCanvas> with <mTransform>.

Example:
// Scale the canvas with a transform
transform this canvas by transform with scale [2,2]

Tags: Canvas




Name: TransformMakeWithMatrixAsList

Type: operator

Syntax: 	transform with matrix <mMatrix>

Summary: Creates a new transform.

mTranslation: An expression which evaluates to a list of 6 numbers, the a, b, c, d, tx and ty values of the transform matrix.

Returns: A new translation transform.

Example:
// Create combined rotate, scale, and translate transform
variable tTransform
put transform with matrix [0, 2, -2, 0, 50, 100] into tTransform

Tags: Canvas




Name: CanvasOperationScale

Type: statement

Syntax: 	scale <mCanvas> by <mScale>

Summary: Apply a scale to a canvas.

mScale: An expression which evaluates to a list of numbers.

mCanvas: An expression which evaluates to a canvas.

Description: Scales the transform of <mCanvas> by <mScale>.

Example:
// Scale the canvas
scale this canvas by [2,2]

Tags: Canvas




Name: CanvasOperationEndLayer

Type: statement

Syntax: 	end layer on <mCanvas>

Summary: End the current drawing layer on a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: Ends the layer on <mCanvas>, rendering to the previous layer with the opacity, blend mode, and effect properties set when the layer began.

Example:
// Draw two overlapping rectangles grouped with half transparency
set the opacity of this canvas to 0.5
begin layer on this canvas
fill rectangle path of rectangle path [50,50,100,100] on this canvas
fill rectangle path of rectangle path [75,75,125,125] on this canvas
end layer on this canvas

Example:
// Create an effect for the new layer
variable tEffect as Effect
put outer shadow effect into tEffect

// Draw rectangle with an effect applied
begin layer with tEffect on this canvas
fill rectangle path of rectangle [50,50,100,100] on this canvas
end layer on this canvas

Tags: Canvas




Name: CanvasOperationClip

Type: statement

Syntax: 	clip to <mRect> on <mCanvas>

Summary: Clip to a rectangle on a canvas.

mCanvas: An expression which evaluates to a canvas.

mRect: An expression which evaluates to a rectangle.

Description: Modifies the clip of <mCanvas> by intersecting with <mRect>. Drawing operations on <mCanvas> will be confined to the clip region.

Example:
// Set the canvas clip
clip to rectangle [50,50,100,100] on this canvas

// Fill rectangle path on canvas. only the region of the rectangle that falls within the canvas clip will be rendered.
fill rectangle path of rectangle [25, 25, 75, 75] on this canvas

Tags: Canvas




Name: CanvasPropertyPaint

Type: operator

Syntax: 	the paint of <mCanvas>

Summary: The current paint of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The paint used for fill / stroke operations on <mCanvas>.

Example:
// Set canvas to paint with solid blue
set the paint of this canvas to solid paint with color [0,0,1]

Tags: Canvas




Name: EffectMake

Type: expression

Syntax: 	<mType> effect

Summary: Creates a new effect.

mType: One of color overlay, inner shadow, outer shadow, inner glow, outer glow.

Returns: A new effect of type <mType> with default property values.

Example:
// Create an effect with default properties
variable tEffect as Effect
put outer shadow effect into tEffect

Tags: Canvas




Name: GradientPropertyTransform

Type: operator

Syntax: 	the transform of <mGradient>

Summary: The transform of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The transform of <mGradient> as a transform. This can be used to scale, position, and skew the gradient instead of setting the from, to, and via points.

Example:
// Create new gradient paint
variable tGradient
put radial gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

variable tRect
put rectangle [ 20, 10, 120, 60 ] into tRect

// Use the transform property to make the radial gradient spread out from the center of tRect
variable tTransform
put the identity transform into tTransform

// Offset transform to the center of tRect
translate tTransform by [(the left of tRect + the right of tRect) / 2, (the top of tRect + the bottom of tRect) / 2]

// Scale out to the right & bottom of tRect
scale tTransform by [the width of tRect / 2, the height of tRect / 2]

// Set the gradient transform
set the transform of tGradient to tTransform

Tags: Canvas




Name: CanvasOperationStroke

Type: statement

Syntax: 	stroke [ <mPath> on ] <mCanvas>

Summary: Stroke a path on a canvas.

mCanvas: An expression which evaluates to a canvas.

mPath: An expression which evaluates to a path.

Description: Strokes <mPath> with the current canvas paint and stroke settings. If mPath is not specified then the current canvas path will be stroked, then emptied from the canvas.

Example:
// Draw a circle path on the canvas
stroke circle path centered at point [100,100] with radius 50 on this canvas

Example:
// Add a path to the canvas
move to point [50,50] on this canvas
line to point [50,100] on this canvas
line to point [100,100] on this canvas

// Stroke the current canvas path
stroke this canvas

Tags: Canvas




Name: PatternMakeRotatedBy

Type: operator

Syntax:     pattern with <mImage> rotated by <mRotation>

Summary: Creates a new rotated pattern paint.

mImage: An expression which evaluates to an image.

mRotation: An expression which evaluates to a number of degrees.

Returns: A new pattern paint based on <mImage> with the specified rotation applied.

Example:
// Load the pattern image.
variable tImage
put image from file "images/backgroundpattern.png" into tImage

// Create a new pattern paint, rotating the image through 90 degrees
variable tPaint
put pattern with tImage rotated by 90 into tPaint

Tags: Canvas




Name: PointPropertyY

Type: operator

Syntax: 	the y of <mPoint>

Summary: The y coordinate of a point value.

mPoint: An expression which evaluates to a point.

Description: The y coordinate of <mPoint>.

Example:
variable tPoint
put point [50, 100] into tPoint

// Store the y-coordinate of the point in a variable
variable tY
put the y of tPoint into tY

// Move the point 10 units downward.
set the y of tPoint to (tY + 10)

Tags: Canvas




Name: ThisCanvas

Type: expression

Syntax:     this canvas

Summary: The canvas used when drawing a widget.

Returns: The target canvas for widget drawing operations.

Example:
// Draw the label centered on the rect of the widget
set the paint of this canvas to solid paint with color [1,1,1]
fill text "Start" at center of my rectangle on this canvas

Tags: Canvas




Name: PathPropertyBoundingBox

Type: operator

Syntax: 	the bounding box of <mPath>

Summary: The bounding box of a path.

mPath: An expression which evaluates to a path.

Description: The smallest rectangle that competely encloses <mPath>.

Example:
// Create a circle path
variable tPath as Path
put circle path centered at point [100,100] with radius 50 into tPath

// Get the bounds of the path
variable tBounds as Rectangle
put the bounding box of tPath into tBounds

Tags: Canvas




Name: CanvasOperationRestoreState

Type: statement

Syntax: 	restore state of <mCanvas>

Summary: Restore the previously saved state of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: Restores the properties of <mCanvas> from the top of the saved property stack.

Example:
// Save the current canvas properties
save state of this canvas

// Change various properties of the canvas
set the paint of this canvas to solid paint with color [1,1,0,0.5]
set the blend mode of this canvas to "color dodge"
rotate this canvas by 30
set the font of this canvas to font "Helvetica" with size 15

// Restore the previous canvas properties
restore state of this canvas

Tags: Canvas




Name: RectanglePropertyRight

Type: operator

Syntax: 	the right of <mRect>

Summary: The right edge of a rectangle value.

mRect: An expression which evaluates to a rectangle.

Description:
The location along the x-axis of the right edge of the rectangle.

>*Note:* Setting the right of a rectangle will reposition it without altering the width or height.

Example:
variable tRect
put rectangle [50,100,150,200] into tRect

// Store the right edge of the rectangle in a variable
variable tRight
put the right of tRect into tRight

// Move the rectangle horizontally to a new position.
set the right of tRect to (tRight + 10)

Tags: Canvas




Name: CanvasOperationClosePath

Type: statement

Syntax: 	close path on <mCanvas>

Summary: Closes the current subpath of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: Adds a line from the previous point to the start of current subpath, signaling the end of the subpath.

Example:
// Begin a new subpath on the canvas
move to point [25, 50] on this canvas

// Continue path with a curve through 25,100 to 50,100
curve through point [25,100] to point [50,100] on this canvas

// Close the path
close path on this canvas

// stroke the canvas path
stroke this canvas

Tags: Canvas




Name: GradientOperationRotate

Type: statement

Syntax: 	rotate <mGradient> by <mRotation>

Summary: Apply a rotation to a gradient paint.

mRotation: An expression which evaluates to a number.

mGradient: An expression which evaluates to a gradient.

Description: Rotates the transform of <mGradient> by <mRotation> degrees.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Rotate the gradient
rotate tGradient by 45

Tags: Canvas




Name: TransformOperationScale

Type: statement

Syntax: 	scale <mTransform> by <mScale>

Summary: Apply a scale to a transform.

mTransform: An expression which evaluates to a transform.

mScale: An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Description: 	Apply the given scale to <mTransform>. This is equivalent to concatenating <mTransform> with a new scale transform.

Example:
// Create a new transform
variable tTransform
put the identity transform into tTransform

// Apply a uniform scale to the transform
scale tTransform by [0.5]

// Apply a non-uniform scale to the transform
scale tTransform by [2.2, 3]

Tags: Canvas




Name: CanvasOperationFillTextAligned

Type: statement

Syntax: 	fill text <mText> at <mAlignment> of <mRect> on <mCanvas>

Summary: Render filled text on a canvas.

mCanvas: An expression which evaluates to a canvas.

mText: An expression which evaluates to a string.

mRect: An expression which evaluates to a rectangle.

Description: Renders <mText> aligned to the specified sides of <mRect> on <mCanvas> using the current font setting.

Example:
// Set the canvas font
set the font of this canvas to font "Helvetica"

// Draw the text in the top-left corner of the target rectangle
fill text "Widget Label" at top left of rectangle [50, 100, 250, 200] on this canvas

Tags: Canvas




Name: GetPixelDataOfCanvas

Type: operator

Syntax:   the pixel data of <Canvas>

Summary: Get the current contents of a canvas as raw pixel data

Parameters:

Canvas: The canvas to be examined.

Returns: The raw pixel values as binary data.

Description:
Capture the current contents of the <Canvas> as raw pixel data in RGBA
format with 8 bits per colour component, i.e. 32 bits or 4 bytes per
pixel.

Tags: Canvas




Name: SolidPaintMake

Type: operator

Syntax: 	solid paint with <mColor>

Summary: Creates a new solid color paint.

mColor: An expression which evaluates to a color.

Returns: A new paint using <mColor>.

Example:
// Create a new green paint
variable tPaint
put solid paint with color [0,1,0] into tPaint

Tags: Canvas




Name: TransformOperationConcat

Type: statement

Syntax: 	concat <mTransformA> with <mTransformB>

Summary: Concatenate transform a with transform b.

mTransformA: An expression which evaluates to a transform.

mTransformB: An expression which evaluates to a transform.

Description: Concatenating transforms modifies the original transform to produce a single transform that is the equivalent of applying the new transform followed by the original. Changing the order of concatenation will result in a transform with different effects.

Example:
// Create a new scaling transform
variable tScale
put transform with scale [5,10] into tScale

// Create a new rotation transform
variable tRotation
put transform with rotation by 30 into tRotation

variable tTransform

// Create a transform representing a rotation followed by a scale
put tScale into tTransform
concat tTransform with tRotation

// Create a transform representing a scale followed by a rotation
put tRotation into tTransform
concat tTransform with tScale

Tags: Canvas




Name: PathMakeWithCircle

Type: operator

Syntax: 	circle path centered at <mCenter> with radius <mRadius>

Summary: Creates a new path.

mCenter: An expression which evaluates to a point.

mRadius: An expression which evaluates to a number.

Returns: A new circle path.

Example:
// Create a circle path
variable tPath as Path
put circle path centered at point [100,100] with radius 50 into tPath

Tags: Canvas




Name: PathMake

Type: operator

Syntax: 	path <mInstructions>

Summary: Creates a new path.

mInstructions: An expression which evaluates to a string.

Returns: A new path created from the instructions provided. The format of the path instructions is the same as that used for SVG path data as defined here - http://www.w3.org/TR/SVG/paths.html#PathData

Example:
// Create a closed path with a line and some curves
variable tPath as Path
put path "M10,10 L50,100 Q100,100 100,50 C75,50 50,25 50,10z" into tPath

Tags: Canvas




Name: RectanglePropertyHeight

Type: operator

Syntax: 	the height of <mRect>

Summary: The height of a rectangle value.

mRect: An expression which evaluates to a rectangle.

Description:
The height of the rectangle.

>*Note:* Setting the height of a rectangle will resize it without moving the top edge, expanding or contracting from the bottom.

Example:
variable tRect
put rectangle [50,100,150,200] into tRect

// Store the height of the rectangle in a variable
variable tHeight
put the height of tRect into tHeight

// Increase the height of the rectangle
set the height of tRect to (tHeight + 10)

Tags: Canvas




Name: TransformPropertyMatrixAsList

Type: operator

Syntax: 	the matrix of <mTransform>

Summary: The matrix values of a transform.

mTransform: An expression which evaluates to a transform.

Description: The matrix values of <mTransform> as a list of 6 numbers.

Example:
variable tTransform
put transform with translation [20,50] into tTransform

// Get the current transform matrix
variable tMatrix
put the matrix of tTransform into tMatrix

// Directly set the components
put 2.5 into element 1 of tMatrix
put 0 into element 2 of tMatrix
put 0 into element 3 of tMatrix
put 2.5 into element 4 of tMatrix

// Update the transform with the new values
set the matrix of tTransform to tMatrix

Tags: Canvas




Name: ColorPropertyBlue

Type: operator

Syntax: 	the blue of <mColor>

Summary: The blue component of a color value.

mColor: An expression which evaluates to a color.

Description:
The blue component of <mColor>

>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1.

Example:
variable tColor
put color [0.75, 1.0, 0.5] into tColor

// Store the old blue value
variable tBlue
put the blue of tColor into tBlue

// Set the blue component of the color to full intensity
set the blue of tColor to 1

Tags: Canvas




Name: TransformMakeIdentity

Type: expression

Syntax: 	the identity transform

Summary: The identity transform.

Returns: A new identity transform.

Description: The identity transform represents a coordinate transformation where the set of coordinates remain the same after it is applied. This can be useful when specifying that coordinates should not be altered, or as a starting point when combining transforms to produce a more complex one.

Example:
variable tTransform
put the identity transform into tTransform

Tags: Canvas




Name: EffectPropertyDistance

Type: operator

Syntax: 	the distance of <mEffect>

Summary: The distance of an effect.

mEffect: An expression which evaluates to an effect.

Description: The distance of <mEffect> as a number. Distance applies to inner shadow, and outer shadow effect types

Example:
// Create an effect with distance 5
variable tProps as Array
put the empty array into tProps

put 5 into tProps["distance"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Set the effect distance
set the distance of tEffect to 50

Tags: Canvas




Name: ImageMakeFromResourceFile

Type: operator

Syntax: 	image from resource file <mResource>

Summary: Creates a new image.

mResource: An expression which evaluates to a string.

Returns: A new image decoded from the named module resource file.

Example:
// Load image from a bundled resource file
variable tImage
put image from resource file "images/logo.png" into tImage

Tags: Canvas




Name: PathOperationCurveThrough

Type: statement

Syntax: 	curve through <mThroughA> [ then <mThroughB> ] to <mTo> on <mPath>

Summary: Adds a curve to a path.

mThroughA: An expression which evaluates to a point.

mThroughB: An expression which evaluates to a point.

mTo: An expression which evaluates to a point.

mPath: An expression which evaluates to a path.

Description: Adds a curve from the previous point through one or two control points to <mTo> on <mPath>.

Example:
// Create a new empty path
variable tPath as Path
put the empty path into tPath

// Begin a new subpath of tPath
move to point [25, 50] on tPath

// Continue path with a curve through 25,100 to 50,100
curve through point [25,100] to point [50,100] on tPath

// Continue path with a curve through 50,75 then 50,50 to 50,100
curve through point [50,75] then point [50,50] to point [25,50] on tPath

Tags: Canvas




Name: PathOperationClosePath

Type: statement

Syntax: 	close path on <mPath>

Summary: Closes the current subpath of a path.

mPath: An expression which evaluates to a path.

Description: Adds a line from the previous point to the start of current subpath, signaling the end of the subpath.

Example:
// Create a new empty path
variable tPath as Path
put the empty path into tPath

// Begin a new subpath of tPath
move to point [25, 50] on tPath

// Continue path with a curve through 25,100 to 50,100
curve through [25,100] to [50,100] on tPath

// Close the path
close path on tPath

Tags: Canvas




Name: FontMake

Type: operator

Syntax: 	font <mName>

Summary: Creates a new instance of the named font.

mName: An expression which evaluates to a string.

Returns: A new instance of the named font with the default size of 12pts.

Example:
// Create Arial font
variable tFont as Font
put font "Arial" into tFont

Tags: Canvas




Name: PathPropertySubpath

Type: operator

Syntax: 	subpath <mStart> [ to <mEnd> ] of <mPath>

Summary: The subpaths of a path.

mPath: An expression which evaluates to a path.

mStart: An expression which evaluates to a number.

mEnd: An expression which evaluates to a number.

Description: The subpaths of <mPath> in the range <mStart> to <mEnd>. Each subpath or range of subpaths is itself a path.

Example:
// Create a path with multiple subpaths
variable tPath as Path
put path "M50,50 L100,50 M100,100 L150,100 M150,150 L200,150"

// Split out the first subpath of a path
variable tSubPath as Path
put subpath 1 of tPath into tSubPath

// Store the remaining subpaths in the original path
put subpath 2 to -1 of tPath into tPath

Tags: Canvas




Name: GradientOperationTransform

Type: statement

Syntax: 	transform <mGradient> by <mTransform>

Summary: Apply a transform to a gradient paint.

mTransform: An expression which evaluates to a transform.

mGradient: An expression which evaluates to a gradient.

Description: Concatenates the transform of <mGradient> with <mTransform>.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Scale the gradient with a transform
transform tGradient by transform with scale [2,2]

Tags: Canvas




Name: CanvasPropertyMiterLimit

Type: operator

Syntax: 	the miter limit of <mCanvas>

Summary: The current miter limit of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The limit of miter joins as a number. Specifies how far miter joins can extend from the meeting point of two lines before a bevel join is used instead.

Example:
// Draw a right-angled triangle, setting the miter limit so only the right-angle corner is mitered.
set the miter limit of this canvas to 1.5
stroke polygon path with points [point [50,50], point [50,100], point [100,50]] on this canvas

Tags: Canvas




Name: GradientStopPropertyColor

Type: operator

Syntax: 	the color of <mStop>

Summary: The color of a gradient stop value.

mStop: An expression which evaluates to a gradient stop.

Description: The color of <mStop>.

Example:
variable tStop
put gradient stop at 0 with color [1,1,1] into tStop

// Get the color of a stop
variable tColor
put the color of tStop into tColor

// Set the stop color to red
set the color of tStop to color [1,0,0]

Tags: Canvas




Name: CanvasPropertyBlendMode

Type: operator

Syntax: 	the blend mode of <mCanvas>

Summary: The current blend mode of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description:
The blend mode used for drawing operations on <mCanvas> as a string. Can be any one of:
- clear
- copy
- source over
- source in
- source out
- destination over
- destination in
- destination out
- destination atop
- xor
- plus darker
- plus lighter
- multiply
- screen
- overlay
- darken
- lighten
- color edge
- color burn
- soft light
- hard light
- difference
- exclusion
- hue
- saturation
- color
- luminosity

Example:
// Use color dodge mode to draw on canvas
set the blend mode of this canvas to "color dodge"

Tags: Canvas




Name: PathOperationScale

Type: statement

Syntax: 	scale <mPath> by <mScale>

Summary: Apply a scale to a path.

mScale: An expression which evaluates to a list of numbers.

mPath: An expression which evaluates to a path.

Description: Scales <mPath> by <mScale>.

Example:
// Create a rectangle path
variable tPath as Path
put rectangle path of rectangle [10,10,210,60] into tPath

// Scale the path
scale tPath by [2,2]

Tags: Canvas




Name: PathMakeWithLine

Type: operator

Syntax: 	line path from <mFrom> to <mTo>

Summary: Creates a new path.

mFrom: An expression which evaluates to a point.

mTo: An expression which evaluates to a point.

Returns: A new line path.

Example:
// Create a line path
variable tPath as Path
put line path from point [50,100] to point [100,50] into tPath

Tags: Canvas




Name: CanvasPropertyImageResizeQuality

Type: operator

Syntax: 	the image resize quality of <mCanvas>

Summary: The current image resize quality of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The image resize quality used when drawing scaled images and patterns on <mCanvas> as a string. Can be one of "none", "low", "medium", "high".

Example:
// Use low (but faster) image resize algorithm to draw scaled images
set the image resize quality of this canvas to "low"

Tags: Canvas




Name: CanvasPropertyJoinStyle

Type: operator

Syntax: 	the join style of <mCanvas>

Summary: The current join style of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: Determines how to draw the join between the lines of a path when stroking. Can be one of "bevel", "round", or "miter".

Example:
// Draw a square with beveled corners.
set the join style of this canvas to "bevel"
stroke rectangle path of rectangle [25, 25, 75, 75] on this canvas

Tags: Canvas




Name: PatternOperationScale

Type: statement

Syntax: 	scale <mPattern> by <mScale>

Summary: Apply a scale to a pattern.

mPattern: An expression which evaluates to a pattern.

mScale: An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Description: Scales the transform of <mPattern> by <mScale>

Example:
// Create a new pattern paint from an image file
variable tPattern
put pattern with image from file "images/pattern.png" into tPattern

// Scale the pattern to twice the current width
scale tPattern by [2,1]

Tags: Canvas




Name: CanvasPropertyDashPhase

Type: operator

Syntax: 	the dash phase of <mCanvas>

Summary: The current dash phase of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The offset into the dashes at which to begin applying the dash pattern.

Example:
// Draw a rectangle with short, widely spaced dashes, offset to begin from the middle of the dash pattern
set the dashes of this canvas to [10, 40]
set the dash phase of this canvas to 25
stroke rectangle path of rectangle [50, 50, 200, 200] on this canvas

Tags: Canvas




Name: TransformOperationSkew

Type: statement

Syntax: 	skew <mTransform> by <mSkew>

Summary: Apply a skew to a transform.

mTransform: An expression which evaluates to a transform.

mSkew: An expression which evaluates to a list of 2 numbers, the x-axis skew and y-axis skew.

Description: 	Apply the given skew to <mTransform>

Example:
variable tTransform
// Create a new transform
put the identity transform into tTransform
// Apply a skew to the transform
skew tTransform by [1, 0]

Tags: Canvas




Name: GetPixelWidthOfCanvas

Type: operator

Syntax:   the pixel width of <Canvas>

Summary: Get the width of a canvas in pixels.

Parameters:

Canvas: The canvas to be examined.

Returns: The width of the canvas, in pixels.

Tags: Canvas




Name: GradientPropertyMirror

Type: operator

Syntax: 	the mirror of <mGradient>

Summary: The mirror of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The mirror of <mGradient> as a boolean. If mirror is true then the ramp will be reversed on each repeat.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Toggle the mirroring of a gradient
variable tMirror
put the mirror of tGradient into tMirror
set the mirror of tGradient to not tMirror

Tags: Canvas




Name: ColorPropertyAlpha

Type: operator

Syntax: 	the alpha of <mColor>

Summary: The alpha component of a color value.

mColor: An expression which evaluates to a color.

Description:
The alpha component of <mColor>

>*Note:* The alpha value represents the opacity of the color, expressed as a real number between 0 (fully transparent) and 1 (fully opaque).

Example:
variable tColor
put color [0.75, 1.0, 0.5] into tColor

// Store the old alpha value
variable tAlpha
put the alpha of tColor into tAlpha

// Make the color semi-transparent
set the alpha of tColor to 0.5

Tags: Canvas




Name: PathOperationLineTo

Type: statement

Syntax: 	line to <mPoint> on <mPath>

Summary: Adds a line to a path.

mPath: An expression which evaluates to a path.

mPoint: An expression which evaluates to a point.

Description: Adds a line from the previous point to <mPoint> on <mPath>.

Example:
// Create a new empty path
variable tPath as Path
put the empty path into tPath

// Begin a new subpath of tPath
move to point [25, 50] on tPath

// Continue path with a line to 50,100
line to [50,100] on tPath

Tags: Canvas




Name: CanvasOperationSaveState

Type: statement

Syntax: 	save state of <mCanvas>

Summary: Save the current state of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: Saves the current properties of <mCanvas> to the top of a stack so that they can be restored later.

Example:
// Save the current canvas properties
save state of this canvas

// Change various properties of the canvas
set the paint of this canvas to solid paint with color [1,1,0,0.5]
set the blend mode of this canvas to "color dodge"
rotate this canvas by 30
set the font of this canvas to font "Helvetica" with size 15

// Restore the previous canvas properties
restore state of this canvas

Tags: Canvas




Name: PathOperationEllipticArcTo

Type: statement

Syntax: 	arc to <mEnd> with radii <mRadii> rotated by <mAngle> on <mPath>

Summary: Adds an arc to a path.

mEnd: An expression which evaluates to a point.

mRadii: An expression which evaluates to a list of numbers.

mAngle: An expression which evaluates to a number.

mPath: An expression which evaluates to a path.

Description:
Adds an arc from the previous point to <mEnd> on <mPath>, following a section of an ellipse with the given radii & angle.
As there can be two different ellipses that match the parameters, and two potential arcs for each ellipse, this variation of "arc to ..." will select the arc that most closely matches the direction from the last point to the current position on <mPath>.

Example:
// Construct a path tracing out a rectangle with rounded bottom corners.
variable tPath
put the empty path into tPath

// Begin a new subpath
move to point [0, 0] on tPath

// Trace the left edge
line to point [0, my height - 25] on tPath

// Continue path with an arc to the bottom edge
arc to point [my height, 25] with radii [25, 25] rotated by 0 on tPath

// Trace the bottom edge
line to point [my width - 25, my height] on tPath

// Continue path with an arc to the right edge
arc to point [my width, my height - 25] with radii [25, 25] rotated by 0 on tPath

// Trace the right edge
line to point [my width, 0] on tPath

// Close the path with a line back to the starting point
close path on tPath

Tags: Canvas




Name: ImageDensityProperty

Type: operator

Syntax: 	the density of <mImage>

Summary: The density of an image.

mImage: An expression which evaluates to an image.

Description: The image density in DPI (dots per inch)

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// scale down image based on standard DPI of 72.
variable tScale as Number
put (72 / the density of tImage) into tScale
scale this canvas by [tScale, tScale]
draw tImage into rectangle [0,0,the width of tImage,the height of tImage] of this canvas

Tags: canvas




Name: CanvasOperationBeginLayer

Type: statement

Syntax: 	begin layer [ with <mEffect> ] on <mCanvas>

Summary: Begin a new drawing layer on a canvas.

mCanvas: An expression which evaluates to a canvas.

mEffect: An expression which evaluates to an effect.

Description: Begins a new layer on <mCanvas> to group drawing operations for which the opacity, blend mode, and optional effect are to be applied to as a whole rather than individually.

Example:
// Draw two overlapping rectangles grouped with half transparency
set the opacity of this canvas to 0.5
begin layer on this canvas
fill rectangle path of rectangle path [50,50,100,100] on this canvas
fill rectangle path of rectangle path [75,75,125,125] on this canvas
end layer on this canvas

Example:
// Create an effect for the new layer
variable tEffect as Effect
put outer shadow effect into tEffect

// Draw rectangle with an effect applied
begin layer with tEffect on this canvas
fill rectangle path of rectangle [50,50,100,100] on this canvas
end layer on this canvas

Tags: Canvas




Name: RectangleMake

Type: operator

Syntax: 	rectangle <mRect>

Summary: Creates a new rectangle value.

mRect: An expression which evaluates to a list of 4 numbers, the left, top, right and bottom edges of the rectangle.

Returns: A new rectange with the given edges.

Example:
// Initialize tRect to a rectangle value with origin at point 50,50 and size 100x50
variable tRect
put rectangle [50, 50, 150, 100] into tRect

Tags: Canvas




Name: ImageMakeFromFile

Type: operator

Syntax: 	image from file <mPath>

Summary: Creates a new image.

mPath: An expression which evaluates to a string.

Returns: A new image loaded from the file path provided.

Example:
// Load image from a file path
variable tImage
put image from file "images/logo.png" into tImage

Description:
If the file path is relative it will be resolved relative to
`this card of the defaultStack` in a library handler or the current
widget instance script object if in a widget handler.

Tags: Canvas




Name: FontPropertyBold

Type: operator

Syntax: 	the bold of <mFont>

Summary: The bold setting of a font.

mFont: An expression which evaluates to a font.

Description: The bold flag of <mFont> as a boolean. If true, then <mFont> is bold.

Example:
// Create a font
variable tFont as Font
put font "Arial" at size 20 into tFont

// Set the font to bold
set the bold of tFont to true

Tags: Canvas




Name: CanvasOperationLineTo

Type: statement

Syntax: 	line to <mPoint> on <mCanvas>

Summary: Add a line to a canvas.

mCanvas: An expression which evaluates to a canvas.

mPoint: An expression which evaluates to a point.

Description: Adds a line to <mPoint> on the current path of <mCanvas>

Example:
// move to a point on the canvas
move to point [0,50] on this canvas

// add a line to the canvas path
line to point [50,50] on this canvas

// stroke the canvas path
stroke this canvas

Tags: Canvas




Name: PatternMakeTranslatedBy

Type: operator

Syntax:     pattern with <mImage> translated by <mTranslation>

Summary: Creates a new translated pattern paint.

mImage: An expression which evaluates to an image.

mTranslation: An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Returns: A new pattern paint based on <mImage> with the specified translation applied.

Example:
// Load the pattern image.
variable tImage
put image from file "images/backgroundpattern.png" into tImage

// Create a new pattern paint, offsetting the image to the top-left of tRect
variable tPaint
variable tRect
put rectangle [20, 50, 120, 100] into tRect
put pattern with tImage translated by [the left of tRect, the top of tRect] into tPaint

Tags: Canvas




Name: FontPropertyName

Type: operator

Syntax: 	the name of <mFont>

Summary: The name of a font.

mFont: An expression which evaluates to a font.

Description: The name of <mFont>.

Example:
// Create a font
variable tFont as Font
put font "Arial" at size 20 into tFont

// Get the old font name
variable tFontName as String
put the name of tFont into tName

// Set the font to helvetica
set the name of tFont to "Helvetica"

Tags: Canvas




Name: TransformPropertyInverse

Type: operator

Syntax: 	the inverse of <mTransform>

Summary: The inverse of a transform.

mTransform: An expression which evaluates to a transform.

Description:
The inverse of <mTransform>

>*Note:* The inverse of a transform matrix is the transform that reverses the effect of the original. Combining a transform with its inverse will produce the identity transform.

Example:
variable tTransform
put transform with matrix [0,2,-2,0,50,100] into tTransform

// Get the inverse of the current transform
variable tInverse
put the inverse of tTransform into tInverse

// Combine the transform with its inverse to produce the identity transform
concat tTransform with tInverse

Tags: Canvas




Name: FontMakeWithSize

Type: operator

Syntax: 	font <mName>  at size <mSize>

Summary: Creates a new instance of the named font.

mName: An expression which evaluates to a string.

mSize: An Expression which evaluates to a number.

Returns: A new instance of the named font at size <mSize> points.

Example:
// Create 20pt Arial font
variable tFont as Font
put font "Arial" at size 20 into tFont

Tags: Canvas




Name: PatternMakeScaledBy

Type: operator

Syntax:     pattern with <mImage> scaled by <mScale>

Summary: Creates a new scaled pattern paint.

mImage: An expression which evaluates to an image.

mScale: An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Returns: A new pattern paint based on <mImage> with the specified scale applied.

Example:
// Load the pattern image.
variable tImage
put image from file "images/backgroundpattern.png" into tImage

// Create a new pattern paint, scaling the image to half size
variable tPaint
put pattern with tImage scaled by [0.5] into tPaint

Tags: Canvas




Name: FontPropertyItalic

Type: operator

Syntax: 	the italic of <mFont>

Summary: The italic setting of a font.

mFont: An expression which evaluates to a font.

Description: The italic flag of <mFont> as a boolean. If true, then <mFont> is italic.

Example:
// Create a font
variable tFont as Font
put font "Arial" at size 20 into tFont

// Set the font to italic
set the italic of tFont to true

Tags: Canvas




Name: TransformMakeScale

Type: operator

Syntax: 	transform with scale <mScale>

Summary: Creates a new scaling transform value.

mScale: An expression which evaluates to a list of 1 or 2 numbers, the x-axis scale and y-axis scale, or the uniform scale when only a single value is given.

Returns: A new scale transform.

Example:
// Create x2 uniformly scaling transform
variable tTransform
put transform with scale [2] into tTransform

// Create transform which only scales in the direction of the x axis
put transform with scale [ 2, 1 ] into tTransform

Tags: Canvas




Name: CanvasPropertyStrokeWidth

Type: operator

Syntax: 	the stroke width of <mCanvas>

Summary: The current stroke width of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The width of lines used when stroking a path on <mCanvas> as a number.

Example:
// Draw paths with line width 20
set the stroke width of this canvas to 20

Tags: Canvas




Name: GradientPropertyTo

Type: operator

Syntax: 	the to of <mGradient>

Summary: The to point of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The to point of <mGradient> as a point. Defines the end point when drawing the gradient.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

variable tRect
put rectangle [ 20, 10, 120, 60 ] into tRect

// Set the end point of the gradient to the right of tRect
set the from of tGradient to point [the right of tRect, (the top of tRect + the bottom of tRect) / 2]

Tags: Canvas




Name: GetPixelHeightOfCanvas

Type: operator

Syntax:   the pixel height of <Canvas>

Summary: Get the height of a canvas in pixels.

Parameters:

Canvas: The canvas to be examined.

Returns: The height of the canvas, in pixels.

Tags: Canvas




Name: EffectPropertyColor

Type: operator

Syntax: 	the color of <mEffect>

Summary: The color of an effect.

mEffect: An expression which evaluates to an effect.

Description: The color of <mEffect> as a color.

Example:
// Create an effect with color "black"
variable tProps as Array
put the empty array into tProps

put color [0,0,0] into tProps["color"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Change effect color to green.
set the color of tEffect to color [0,1,0]

Tags: Canvas




Name: GradientPropertyVia

Type: operator

Syntax: 	the via of <mGradient>

Summary: The via point of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The via point of <mGradient> as a point. This is used to skew and scale the gradient when drawing.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

variable tRect
put rectangle [ 20, 10, 120, 60 ] into tRect

// Set the via of the gradient to the bottom of tRect
set the via of tGradient to point [(the left of tRect + the right of tRect) / 2, the bottom of tRect]

Tags: Canvas




Name: GradientOperationAddStop

Type: statement

Syntax: 	add <mStop> to <mGradient>

Summary: Add a new stop to the ramp of a gradient paint.

mStop: An expression which evaluates to a gradient stop

mGradient: An expression which evaluates to a gradient.

Description: Appends the stop to the ramp of <mGradient>. The offset of the new gradient should not be before the offset of the last stop.

Example:
// Create new gradient paint with empty ramp
variable tGradient
put linear gradient with ramp [] into tGradient

// Add stops to the gradient
add gradient stop at 0 with color [0,0,0] to tGradient
add gradient stop at 1 with color [1,1,1] to tGradient

Tags: Canvas




Name: GradientMakeWithRamp

Type: operator

Syntax: 	<mType> gradient with ramp <mRamp>

Summary: Creates a new gradient paint.

mRamp: An expression which evaluates to a list of gradient stops.

Returns: A new gradient paint.

Example:
// List to hold gradient stops
variable tRamp
put the empty list into tRamp

// Set up gradient stops
push gradient stop at 0 with color [1,0,0] onto tRamp
push gradient stop at 0.5 with color [0,1,0,0.5] onto tRamp
push gradient stop at 1 with color [0,0,1] onto tRamp

// Create new gradient paint
variable tGradient
put linear gradient with ramp tRamp into tGradient

Tags: Canvas




Name: GradientOperationScale

Type: statement

Syntax: 	scale <mGradient> by <mScale>

Summary: Apply a scale to a gradient paint.

mScale: An expression which evaluates to a list of numbers.

mGradient: An expression which evaluates to a gradient.

Description: Scales the transform of <mGradient> by <mScale>.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Scale the gradient
scale tGradient by [2,2]

Tags: Canvas




Name: TransformPropertySkew

Type: operator

Syntax: 	the skew of <mTransform>

Summary: The skew component of a transform.

mTransform: An expression which evaluates to a transform.

Description: The skew of <mTransform> as a list of 2 numbers (the x and y skew values).

Example:
variable tTransform
put transform with matrix [0, 2, -2, 0, 50, 100] into tTransform

// Store the old skew component
variable tSkew
put the skew of tTransform into tSkew

// Remove the skew
set the skew of tTransform to [0,0]

Tags: Canvas




Name: TransformOperationRotate

Type: statement

Syntax: 	rotate <mTransform> by <mRotation>

Summary: Apply a rotation to a transform.

mTransform: An expression which evaluates to a transform.

mRotation: An expression which evaluates to a number of degrees.

Description: 	Apply a rotation by <mRotation> degrees to <mTransform>. This is equivalent to concatenating <mTransform> with a new rotation transform.

Example:
// Create a new transform
variable tTransform
put the identity transform into tTransform

// Rotate the transform by 90 degrees
rotate tTransform by 90

Tags: Canvas




Name: CanvasOperationDrawImage

Type: statement

Syntax: 	draw [ from <mSrcRect> of ] <mImage> into <mDestRect> of <mCanvas>

Summary: Draw an image on a canvas.

mCanvas: An expression which evaluates to a canvas.

mImage: An expression which evaluates to an image.

mSrcRect: An expression which evaluates to a rectangle.

mDestRect: An expression which evaluates to a rectangle.

Description: Renders from <mSrcRect> (or the bounds, if not specified) of <mImage> into <mDestRect> of <mCanvas>. The canvas image resize quality determines how the image is scaled if necessary.

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// Draw the image on the canvas
draw tImage into rectangle [0,0,the width of tImage,the height of tImage] of this canvas

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// Draw a section of the image
draw from rectangle[0,0,16,16] of tImage into rectangle [0,0,16,16] of this canvas

Tags: Canvas




Name: PathMakeWithSegment

Type: operator

Syntax: 	segment path centered at <mCenter> with [ radius <mRadius> | radii <mRadii> ] from <mStartAngle> to <mEndAngle>

Summary: Creates a new path.

mCenter: An expression which evaluates to a point.

mRadius: An expression which evaluates to a number.

mRadii: An expression which evaluates to a list of numbers.

mStartAngle: An expression which evaluates to a number.

mEndAngle: An expression which evaluates to a number.

Returns: A new segment path.

Example:
// Create an elliptical segment path
variable tPath as Path
put segment path centered at point [100,100] with radii [100,75] from 0 to 270 into tPath

Example:
// Create a circular segment path
variable tPath as Path
put segment path centered at point [100,100] with radius 100 from 0 to 270 into tPath

Tags: Canvas




Name: RectanglePropertyBottom

Type: operator

Syntax: 	the bottom of <mRect>

Summary: The bottom edge of a rectangle value.

mRect: An expression which evaluates to a rectangle.

Description:
The location along the y-axis of the bottom edge of the rectangle.

>*Note:* Setting the bottom of a rectangle will reposition it without altering the width or height.

Example:
variable tRect
put rectangle [50,100,150,200] into tRect

// Store the bottom edge of the rectangle in a variable
variable tBottom
put the bottom of tRect into tBottom

// Move the rectangle vertically to a new position.
set the bottom of tRect to (tBottom + 10)

Tags: Canvas




Name: TransformOperationTranslate

Type: statement

Syntax: 	translate <mTransform> by <mTranslation>

Summary: Apply a translation to a transform.

mTransform: An expression which evaluates to a transform.

mTranslation: An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Description: 	Apply a translation to <mTransform>. This is equivalent to concatenating <mTransform> with a new translation transform.

Example:
// Create a new transform
variable tTransform
put the identity transform into tTransform

variable tRect
put rectangle [10, 20, 110, 170] into tRect

// Translate the transform to the top-left of tRect
translate tTransform by [the left of tRect, the top of tRect]

Tags: Canvas




Name: CanvasOperationAddPath

Type: statement

Syntax: 	add <mPath> to <mCanvas>

Summary: Add a path to a canvas.

mCanvas: An expression which evaluates to a canvas.

mPath: An expression which evaluates to a path.

Description: Adds <mPath> to the current path of <mCanvas>

Example:
// Add a path to the canvas
add rectangle path of rectangle [0,0,50,100] to this canvas

// Fill the canvas path
fill this canvas

Tags: Canvas




Name: ColorPropertyRed

Type: operator

Syntax: 	the red of <mColor>

Summary: The red component of a color value.

mColor: An expression which evaluates to a color.

Description:
The red component of <mColor>

>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1.

Example:
variable tColor
put color [0.75, 1.0, 0.5] into tColor

// Store the old red value
variable tRed
put the red of tColor into tRed

// Invert the intensity of the red color component
set the red of tColor to 1.0 - tRed

Tags: Canvas




Name: FontOperationTextImageBounds

Type: operator

Syntax: 	the image bounds of text <mText> with <mFont>

Summary: Measure text precisely when drawn with a font.

mText: An expression which evaluates to a string.

mFont: An expression which evaluates to a font.

Returns: The bounding box of <mText> when drawn at point 0,0 with font <mFont>. Returns the bounds as a rectangle.

Example:
// Set up tFont as size 18 Arial
variable tFont as Font
put font "Arial" at size 18 into tFont

// Measure text with tFont
variable tBounds as Rectangle
put the image bounds of text "Sample text" with tFont into tBounds

Description:
The exact bounds of the text, which will fully enclose each character.

>*Note:* This can be more time-consuming to compute than the layout bounds.

Tags: Canvas




Name: TransformPropertyScale

Type: operator

Syntax: 	the scale of <mTransform>

Summary: The scale component of a transform.

mTransform: An expression which evaluates to a transform.

Description: The scale of <mTransform> as a list of 2 numbers (the x and y scales)

Example:
variable tTransform
put transform with matrix [0, 2, -2, 0, 50, 100] into tTransform

// Store the old scale component
variable tScale
put the scale of tTransform into tScale

// Modify the scale by adding 1 to the x scale value
set the scale of tTransform to [element 1 of tScale + 1, element 2 of tScale]

Tags: Canvas




Name: PathOperationEllipticArcToWithFlags

Type: statement

Syntax: 	arc to <mEnd> with radii <mRadii> rotated by <mAngle> taking ( largest | smallest ) ( clockwise | anticlockwise ) route on <mPath>

Summary: Adds an arc to a path.

mEnd: An expression which evaluates to a point.

mRadii: An expression which evaluates to a list of numbers.

mAngle: An expression which evaluates to a number.

mPath: An expression which evaluates to a path.

Description:
Adds an arc from the previous point to <mEnd> on <mPath>, following a section of an ellipse with the given radii & angle.
  As there can be two different ellipses that match the parameters, and two potential arcs for each ellipse, the *largest*, *smallest*, *clockwise*, and *anticlockwise* options allow one arc to specified from the four potential arcs.

Example:
variable tPath
put the empty path into tPath

// Begin a new subpath
move to point [25, 50] on tPath

// Continue path with an arc to 50,25
arc to point [50, 25] with radii [25, 25] rotated by 0 taking smallest clockwise route on tPath

// Begin a new subpath
move to point [75, 50] on tPath
// Continue path with a large arc to 50,75
arc to point [50, 75] with radii [25, 25] rotated by 0 taking largest clockwise route on tPath

Tags: Canvas




Name: CanvasOperationCurveThrough

Type: statement

Syntax: 	curve through <mThroughA> [ then <mThroughB> ] to <mPoint> on <mCanvas>

Summary: Add a curve to a canvas.

mCanvas: An expression which evaluates to a canvas.

mThroughA: An expression which evaluates to a point.

mThroughA: An expression which evaluates to a point.

Description: Adds a curve through 1 or 2 points to <mPoint> on the current path of <mCanvas>

Example:
// Begin a new subpath on the canvas
move to point [25, 50] on this canvas

// Continue path with a curve through 25,100 to 50,100
curve through point [25,100] to point [50,100] on this canvas

// Continue path with a curve through 50,75 then 50,50 to 50,100
curve through point [50,75] then point [50,50] to point [25,50] on this canvas

// stroke the canvas path
stroke this canvas

Tags: Canvas




Name: PathOperationMoveTo

Type: statement

Syntax: 	move to <mPoint> on <mPath>

Summary: Move to a new point on a path.

mPath: An expression which evaluates to a path.

mPoint: An expression which evaluates to a point.

Description: Ends the current subpath and sets the starting point for new components of <mPath> to <mPoint>.

Example:
// Create a new empty path
variable tPath as Path
put the empty path into tPath

// Begin a new subpath of tPath
move to point [50, 50] on tPath

// Add a line to tPath
line to point [100, 50] on tPath

// Begin a new subpath of tPath
move to point [50, 100] on tPath

// Add a line to tPath
line to point [100, 100] on tPath

Tags: Canvas




Name: ImageMetadataProperty

Type: operator

Syntax: 	the metadata of <mImage>

Summary: the metadata associated with an image.

mImage: An expression which evaluates to an image.

Description: An array containing metadata associated with an image.

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// get the image metadata
variable tMetadata as Array
put the metadata of tImage into tMetadata

// get image density in DPI from the image metadata
variable tDPI as Number
if "density" is among the keys of tMetadata then
	put tMetadata["density"] into tDPI
else
	put 72 into tDPI
end if

Tags: canvas




Name: PathOperationRotate

Type: statement

Syntax: 	rotate <mPath> by <mRotation>

Summary: Apply a rotation to a path.

mRotation: An expression which evaluates to a number.

mPath: An expression which evaluates to a path.

Description: Rotates <mPath> by <mRotation> degrees.

Example:
// Create a rectangle path
variable tPath as Path
put rectangle path of rectangle [10,10,210,60] into tPath

// Rotate the path
rotate tPath by 45

Tags: Canvas




Name: EffectPropertyKnockOut

Type: operator

Syntax: 	the knockout of <mEffect>

Summary: The knockout of an effect.

mEffect: An expression which evaluates to an effect.

Description: The knockout setting of <mEffect> as a boolean. Knockout applies to outer shadow effects and determines whether or not the alpha channel of the source image is applied to the blurred shadow created by the effect. Defaults to true.

Example:
// Create an effect with knockout set to false
variable tProps as Array
put the empty array into tProps

put false into tProps["knockout"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Set the effect knockout to true
set the knockout of tEffect to true

Tags: Canvas




Name: ColorMake

Type: operator

Syntax: 	color <mColor>

Summary: Creates a new color value.

mColor: An expression which evaluates to a list of 3 or 4 numbers, the red, green, blue, and (optional) alpha components of the color.

Returns: A new color with the given RGBA values.

Description: >*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1. The alpha component represents the opacity of the color. If the alpha component is not specified then it is assumed to be 1 (fully opaque).

Example:
variable tColor
// Set tColor to opaque red
put color [1.0, 0.0, 0.0] into tColor

// Set tColor to partially transparent cyan
put color [0.0, 1.0, 1.0, 0.75] into tColor

Tags: Canvas




Name: EffectPropertySize

Type: operator

Syntax: 	the size of <mEffect>

Summary: The size of an effect.

mEffect: An expression which evaluates to an effect.

Description: The size of <mEffect> as a number. Size applies to inner shadow, outer shadow, inner glow, and outer glow effect types

Example:
// Create an effect with size 5
variable tProps as Array
put the empty array into tProps

put 5 into tProps["size"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Set the effect size
set the size of tEffect to 15

Tags: Canvas




Name: GradientOperationTranslate

Type: statement

Syntax: 	translate <mGradient> by <mTranslation>

Summary: Apply a translation to a gradient paint.

mTranslation: An expression which evaluates to a list of numbers.

mGradient: An expression which evaluates to a gradient.

Description: Translates the transform of <mGradient> by <mTranslation>.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Translate the gradient
translate tGradient by [50,100]

Tags: Canvas




Name: CanvasPropertyDashes

Type: operator

Syntax: 	the dashes of <mCanvas>

Summary: The current dashes of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The dashes as a list of numbers. The dashes specifies a sequence of lengths that alternately represent space and dash lengths when stroking a path.

Example:
// Draw a rectangle with short, widely spaced dashes
set the dashes of this canvas to [10, 40]
stroke rectangle path of rectangle [50, 50, 200, 200] on this canvas

Tags: Canvas




Name: RectanglePropertyWidth

Type: operator

Syntax: 	the width of <mRect>

Summary: The width of a rectangle value.

mRect: An expression which evaluates to a rectangle.

Description:
The width of the rectangle.

>*Note:* Setting the width of a rectangle will resize it without moving the left edge, expanding or contracting from the right.

Example:
variable tRect
put rectangle [50,100,150,200] into tRect

// Store the width of the rectangle in a variable
variable tWidth
put the width of tRect into tWidth

// Increase the width of the rectangle
set the width of tRect to (tWidth + 10)

Tags: Canvas




Name: RectanglePropertyTop

Type: operator

Syntax: 	the top of <mRect>

Summary: The top edge of a rectangle value.

mRect: An expression which evaluates to a rectangle.

Description:
The location along the y-axis of the top edge of the rectangle.

>*Note:* Setting the top of a rectangle will reposition it without altering the width or height.

Example:
variable tRect
put rectangle [50,100,150,200] into tRect

// Store the top edge of the rectangle in a variable
variable tTop
put the top of tRect into tTop

// Move the rectangle vertically to a new position.
set the top of tRect to 120

Tags: Canvas




Name: TransformPropertyRotation

Type: operator

Syntax: 	the rotation of <mTransform>

Summary: The rotation component of a transform.

mTransform: An expression which evaluates to a transform.

Description: The rotation of <mTransform> as a number of degrees.

Example:
variable tTransform
put transform with matrix [0, 2, -2, 0, 50, 100] into tTransform

// Store the old rotation component
variable tRotation
put the rotation of tTransform into tRotation

// Double the rotation
set the rotation of tTransform to tRotation * 2

Tags: Canvas




Name: CanvasOperationClipPath

Type: statement

Syntax:     clip to <mPath> on <mCanvas>

Summary: Clip to a path on a canvas.

mCanvas: An expression which evaluates to a canvas.

mPath: An expression which evaluates to a path.

Description: Modifies the clip of <mCanvas> by intersecting with <mRect>. Drawing operations on <mCanvas> will be confined to the clip region.

Example:
// Set the canvas clip
clip to circle path centered at point [100,100] with radius 50 on this canvas

// Fill rectangle path on canvas. only the region of the rectangle that falls within the canvas clip will be rendered.
fill rectangle path of rectangle [25, 25, 75, 75] on this canvas

Tags: Canvas




Name: SolidPaintPropertyColor

Type: operator

Syntax: 	the color of <mSolid>

Summary: The color of a solid paint value.

mPaint: An expression which evaluates to a solid paint.

Description: The color of <mPaint>.

Example:
// Create a new green paint
variable tPaint
put solid paint with color [0,1,0] into tPaint

// Store the old color of tPaint
variable tColor
put the color of tPaint into tColor

// Set the color of tPaint to blue
set the color of tPaint to color [0,0,1]

Tags: Canvas




Name: CanvasPropertyStippled

Type: operator

Syntax: 	the stippled of <mCanvas>

Summary: The current stippled setting of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: A boolean value that determines whether or not stippling will be used when drawing with a solid color paint on <mCanvas>.

Example:
// Draw with stippled red paint on canvas
set the paint of this canvas to solid paint with color [1,0,0]
set the stippled of this canvas to true

Tags: Canvas




Name: RectanglePropertyLeft

Type: operator

Syntax: 	the left of <mRect>

Summary: The left edge of a rectangle value.

mRect: An expression which evaluates to a rectangle.

Description:
The location along the x-axis of the left edge of the rectangle.

>*Note:* Setting the left of a rectangle will reposition it without altering the width or height.

Example:
variable tRect
put rectangle [50,100,150,200] into tRect

// Store the left edge of the rectangle in a variable
variable tLeft
put the left of tRect into tLeft

// Move the rectangle horizontally to a new position.
set the left of tRect to 20

Tags: Canvas




Name: NewCanvasWithSize

Type: operator

Syntax:   a new canvas with size <Size>

Summary: Create a new canvas

Parameters:

Size: A list containing the width and height of the new canvas in pixels

Returns: A newly-created canvas

Description:
Create and return a new temporary canvas of the specified pixel width
and height.

Tags: Canvas




Name: ImagePropertyPixels

Type: operator

Syntax: 	the pixels of <mImage>

Summary: The pixel data of an image.

mImage: An expression which evaluates to an image.

Description: The raw ARGB pixel data of the image.

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// Get the pixels of the image
variable tPixelData as Data
put the pixels of tImage into tPixelData

Tags: Canvas




Name: CanvasOperationMoveTo

Type: statement

Syntax: 	move to <mPoint> on <mCanvas>

Summary: Move to a point on a canvas.

mCanvas: An expression which evaluates to a canvas.

mPoint: An expression which evaluates to a point.

Description: Moves to <mPoint> on the current path of <mCanvas>

Example:
// move to a point on the canvas
move to point [0,50] on this canvas

// add a line to the canvas path
line to point [50,50] on this canvas

// stroke the canvas path
stroke this canvas

Tags: Canvas




Name: PathMakeWithPoints

Type: operator

Syntax: 	( polygon | polyline ) path with points <mPoints>

Summary: Creates a new path.

mPoints: An expression which evaluates to a list of points.

Returns: A new polyline or polygon path. A polygon path will be closed with an additional line from the last point to the first.

Example:
// Create a polyline path
variable tPath as Path
put polyline path with points [point [0,0], point [25,50], point [75,50], point [50,0]] into tPath

Example:
// Create a closed polygon path (rhombus)
variable tPath as Path
put polygon path with points [point [0,0], point [25,50], point [75,50], point [50,0]] into tPath

Tags: Canvas




Name: TransformMakeSkew

Type: operator

Syntax: 	transform with skew <mSkew>

Summary: Creates a new skewing transform value.

mScale: An expression which evaluates to a list of 2 numbers, the x-axis skew and y-axis skew.

Returns: A new skew transform.

Example:
// Create skew transform
variable tTransform
put transform with skew [1,0] into tTransform

Tags: Canvas




Name: EffectPropertySource

Type: operator

Syntax: 	the source of <mEffect>

Summary: The source of an effect.

mEffect: An expression which evaluates to an effect.

Description: The source of <mEffect> as a string. Can be one of "center" or "edge". Source applies to inner glow effects and determines where the glow extends from. Defaults to "edge".

Example:
// Create an effect with source set to "center"
variable tProps as Array
put the empty array into tProps

put "center" into tProps["source"]

variable tEffect as Effect
put inner glow effect with properties tProps into tEffect

// Set the effect source to "edge"
set the source of tEffect to "edge"

Tags: Canvas




Name: PathMakeWithSector

Type: operator

Syntax: 	sector path centered at <mCenter> with [ radius <mRadius> | radii <mRadii> ] from <mStartAngle> to <mEndAngle>

Summary: Creates a new path.

mCenter: An expression which evaluates to a point.

mRadius: An expression which evaluates to a number.

mRadii: An expression which evaluates to a list of numbers.

mStartAngle: An expression which evaluates to a number.

mEndAngle: An expression which evaluates to a number.

Returns: A new sector path.

Example:
// Create an elliptical sector path
variable tPath as Path
put sector path centered at point [100,100] with radii [100,75] from 0 to 270 into tPath

Example:
// Create a circular sector path
variable tPath as Path
put sector path centered at point [100,100] with radius 100 from 0 to 270 into tPath

Tags: Canvas




Name: FontPropertySize

Type: operator

Syntax: 	the size of <mFont>

Summary: The size of a font.

mFont: An expression which evaluates to a font.

Description: The size of <mFont> as a number of points.

Example:
// Create a font
variable tFont as Font
put font "Arial" at size 20 into tFont

// Set the font size to 30pt
set the size of tFont to 30

Tags: Canvas




Name: PatternPropertyImage

Type: operator

Syntax: 	the image of <mPattern>

Summary: The image of a pattern value.

mPattern: An expression which evaluates to a pattern.

Description: The image of <mPattern>.

Example:
// Create a new pattern based on an image file
variable tPattern
put pattern with image from file "images/patternframe1.png" into tPattern

// Store the old image of tPattern
variable tImage
put the image of tPattern into tImage

// Set the pattern to draw the next image
set the image of tPattern to image from file "images/patternframe2.png"

Tags: Canvas




Name: PathPropertyInstructions

Type: operator

Syntax: 	the instructions of <mPath>

Summary: The instructions of a path.

mPath: An expression which evaluates to a path.

Description:
A string containing the series of instructions and point arguments used to construct <mPath>.
>*Note:* The format of the path instructions is the same as that used for SVG path data as defined here - http://www.w3.org/TR/SVG/paths.html#PathData

Example:
// Create a rounded rectangle path
variable tPath as Path
put rounded rectangle path of rectangle [10,10,210,60] with radius 15 into tPath

// Get the instructions of the path
variable tPathData as String
put the instructions of tPath into tPathData

Tags: Canvas




Name: EffectMakeWithProperties

Type: operator

Syntax: 	<mType> effect with properties <mProperties>

Summary: Creates a new effect.

mType: One of color overlay, inner shadow, outer shadow, inner glow, outer glow.

mProperties: An expression which evaluates to an array.

Returns: A new effect of type <mType> with properties read from <mProperties>.

Example:
// Create an effect from an array of properties
variable tProps as Array
put the empty array into tProps

put color [0,0,0] into tProps["color"]
put "source over" into tProps["blend mode"]
put 0 into tProps["spread"]
put 5 into tProps["size"]
put 5 into tProps["distance"]
put 60 into tProps["angle"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

Tags: Canvas




Name: PatternOperationTranslate

Type: statement

Syntax: 	translate <mPattern> by <mTranslation>

Summary: Apply a translation to a pattern.

mPattern: An expression which evaluates to a pattern.

mTranslation: An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Description: translates the transform of <mPattern> by <mTranslation>

Example:
// Create a new pattern paint from an image file
variable tPattern
put pattern with image from file "images/pattern.png" into tPattern

// Translate the pattern 20 units to the left.
translate tPattern by [-20,0]

Tags: Canvas




Name: EffectPropertySpread

Type: operator

Syntax: 	the spread of <mEffect>

Summary: The spread of an effect.

mEffect: An expression which evaluates to an effect.

Description: The spread of <mEffect> as a number between 0 and 1. Spread applies to inner shadow, outer shadow, inner glow, and outer glow effect types

Example:
// Create an effect with spread 0
variable tProps as Array
put the empty array into tProps

put 0 into tProps["spread"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Set the effect spread
set the spread of tEffect to 0.1

Tags: Canvas




Name: CanvasOperationFill

Type: statement

Syntax: 	fill [ <mPath> on ] <mCanvas>

Summary: Fill a path on a canvas.

mCanvas: An expression which evaluates to a canvas.

mPath: An expression which evaluates to a path.

Description: Fills the region bound by <mPath> with the current canvas paint. If mPath is not specified then the current canvas path will be closed and filled, then emptied from the canvas.

Example:
// Fill a circle path on the canvas
fill circle path centered at point [100,100] with radius 50 on this canvas

Example:
// Add a path to the canvas
move to point [50,50] on this canvas
line to point [50,100] on this canvas
line to point [100,100] on this canvas

// Fill the current canvas path
fill this canvas

Tags: Canvas




Name: PathMakeWithEllipse

Type: operator

Syntax: 	ellipse path centered at <mPoint> with radii <mRadii>

Summary: Creates a new path.

mCenter: An expression which evaluates to a point.

mRadii: An expression which evaluates to a list of numbers.

Returns: A new ellipse path.

Example:
// Create an ellipse path
variable tPath as Path
put ellipse path centered at point [100,100] with radii [100,75] into tPath

Tags: Canvas




Name: CanvasPropertyClippingBounds

Type: operator

Syntax: 	the clipping bounds of <mCanvas>

Summary: The current clipping bounds of the canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The clipping bounds of the canvas. Drawing operations on <mCanvas> will be confined to the clip region.

Example:
// Set the canvas clip
clip to rectangle [50,50,100,100] on this canvas

// Fill rectangle path on canvas, covering only the current clip region.
variable tBounds as Rectangle
put the clipping bounds of this canvas into tBounds
fill rectangle path of tBounds on this canvas

Tags: Canvas




Name: PathOperationTransform

Type: statement

Syntax: 	transform <mPath> by <mTransform>

Summary: Apply a transform to a path.

mTransform: An expression which evaluates to a transform.

mPath: An expression which evaluates to a path.

Description: Transforms the points of <mPath> with <mTransform>.

Example:
// Create a rectangle path
variable tPath as Path
put rectangle path of rectangle [10,10,210,60] into tPath

// Scale the path with a transform
transform tPath by transform with scale [2,2]

Tags: Canvas




Name: ImageMakeWithPixels

Type: operator

Syntax: 	image of size <mSize> with pixels <mPixels>

Summary: Creates a new image using raw pixel data.

mSize: An expression which evaluates to a list of integers.

mPixels: An expression which evaluates to binary data

Returns: A new image of the given size, using the provided ARGB pixel data.

Example:
// Read pixel data from file
variable tPixelData as Data
put the contents of file "image_argb_320x480.bin" into tPixelData

// Create image from pixel data
variable tImage as Image
put image of size [320, 480] with pixels tPixelData into tImage

Tags: Canvas




Name: CanvasOperationFillText

Type: statement

Syntax: 	fill text <mText> at <mPoint> on <mCanvas>

Summary: Render filled text on a canvas.

mCanvas: An expression which evaluates to a canvas.

mText: An expression which evaluates to a string.

mPoint: An expression which evaluates to a point.

Description: Renders <mText> at <mPoint> on <mCanvas> using the current font setting.

Example:
// Set the canvas font
set the font of this canvas to font "Helvetica"

// Draw the text
fill text "Widget Label" at point [50,50] on this canvas

Tags: Canvas




Name: TransformMakeRotation

Type: operator

Syntax: 	transform with rotation by <mRotation>

Summary: Creates a new rotation transform value.

mRotation: An expression which evaluates to a number, the number of degrees of the rotation.

Returns: A new rotation transform.

Example:
// Create 30 degree rotation transform
variable tTransform
put transform with rotation by 30 into tTransform

Tags: Canvas




Name: PathMakeEmpty

Type: expression

Syntax: 	the empty path

Summary: Creates a new empty path.

Returns: An empty path.

Example:
// Initialize the path to empty
variable tPath as Path
put the empty path into tPath

// add a line to the path
move to point [0,50] on tPath
line to point [100,50] on tPath

Tags: Canvas




Name: TransformPropertyTranslation

Type: operator

Syntax: 	the translation of <mTransform>

Summary: The translation component of a transform.

mTransform: An expression which evaluates to a transform.

Description: The translation of <mTransform> as a list of 2 numbers (the x and y offset values).

Example:
variable tTransform
put transform with matrix [0, 2, -2, 0, 50, 100] into tTransform

// Store the old translation component
variable tTranslation
put the translation of tTransform into tTranslation

// Adjust the offset of the transformation
set the translation of tTransform to [element 1 of tTranslation + 5, element 2 of tTranslation + 5]

Tags: Canvas




Name: PathOperationAddPath

Type: statement

Syntax: 	add <mSource> to <mDest>

Summary: Extend a path by adding another path.

mSource: An expression which evaluates to a path.

mDest: An expression which evaluates to a path.

Description: Adds the path defined by <mSource> to <mDest>.

Example:
// Create a rectangle path
variable tPath as Path
put rectangle path of rectangle [10,10,210,60] into tPath

// Add another rectangle subpath to tPath
add rectangle path of rectangle [110,10,310,60] to tPath

Tags: Canvas




Name: EffectPropertyType

Type: operator

Syntax: 	the type of <mEffect>

Summary: The type of an effect.

mEffect: An expression which evaluates to an effect.

Description: The type of <mEffect> as a string. Can be one of "color overlay", "inner shadow", "outer shadow", "inner glow", "outer glow".

Example:
// Create an outer shadow effect
variable tEffect as Effect
put outer shadow effect into tEffect

// Get the type of the effect, in this case it will be "outer shadow"
variable tType as String
put the type of tEffect into tType

Tags: Canvas




Name: PatternPropertyTransform

Type: operator

Syntax: 	the transform of <mPattern>

Summary: The transform of a pattern value.

mPattern: An expression which evaluates to a pattern.

Description: The transform of <mPattern>.

Example:
// Create a new pattern paint from a scaled-down image file
variable tPattern
put pattern with image from file "images/pattern.png" scaled by [0.5] into tPattern

// Get the current transform
variable tTransform
put the transform of tPattern into tTransform

// Modify the transform by rotation
rotate tTransform by tDegrees

// Set the pattern to the modified transform
set the transform of tPattern to tTransform

Tags: Canvas




Name: CanvasOperationTranslate

Type: statement

Syntax: 	translate <mCanvas> by <mTranslation>

Summary: Apply a translation to a canvas.

mTranslation: An expression which evaluates to a list of numbers.

mCanvas: An expression which evaluates to a canvas.

Description: Translates the transform of <mCanvas> by <mTranslation>.

Example:
// Translate the canvas
translate this canvas by [50,100]

Tags: Canvas




Name: PathMakeWithRectangle

Type: operator

Syntax: 	rectangle path of <mRect>

Summary: Creates a new path.

mRect: An expression which evaluates to a rectangle.

Returns: A new rectangle path.

Example:
// Create a rectangle path
variable tPath as Path
put rectangle path of rectangle [10,10,210,60] into tPath

Tags: Canvas




Name: CanvasPropertyFillRule

Type: operator

Syntax: 	the fill rule of <mCanvas>

Summary: The current fill rule of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: The rule used to determine when to fill enclosed regions of a path. Can be "even odd" or "non-zero".

Example:
// Set canvas fill rule to non-zero.
set the fill rule of this canvas to "non-zero"

Tags: Canvas




Name: GradientPropertyWrap

Type: operator

Syntax: 	the wrap of <mGradient>

Summary: The wrap of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The wrap of <mGradient> as a boolean. If wrap is true then the gradient ramp will be repeated continually outside the defined extent of the gradient.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Toggle the wrapping of a gradient
variable tWrap
put the wrap of tGradient into tWrap
set the wrap of tGradient to not tWrap

Tags: Canvas




Name: PointMake

Type: operator

Syntax: 	point <mPoint>

Summary: Creates a new point value.

mPoint: An expression which evaluates to a list of 2 numbers, the x and y coordinates of the point.

Returns: A new point with the given coordinates

Example:
variable tPoint
put point [50, 100] into tPoint

Tags: Canvas




Name: PatternOperationTransform

Type: statement

Syntax: 	transform <mPattern> by <mTransform>

Summary: Apply a transform to a pattern.

mPattern: An expression which evaluates to a pattern.

mTransform: An expression which evaluates to a transform.

Description: Modifies the transform of <mPattern> by concatentation with <mTransform>

Example:
// Create a new pattern paint from an image file
variable tPattern
put pattern with image from file "images/pattern.png" into tPattern

// Apply transform to the pattern.
transform tPattern by transform with matrix [0,2,-2,0,5,10]

Tags: Canvas




Name: FontMakeWithStyleAndSize

Type: operator

Syntax: 	font <mName> with ( bold  | italic  | bold italic  ) style at size <mSize>

Summary: Creates a new instance of the named font.

mName: An expression which evaluates to a string.

mSize: An Expression which evaluates to a number.

Returns: A new instance of the named font with style bold, italic, or bold italic, at size <mSize> points.

Example:
// Create 20pt bold Arial font
variable tFont as Font
put font "Arial" with bold style at size 20 into tFont

Tags: Canvas




Name: ImagePropertyWidth

Type: operator

Syntax: 	the width of <mImage>

Summary: The width of an image.

mImage: An expression which evaluates to an image.

Description: The width of the image in pixels.

Example:
// Load an image from a file
variable tImage as Image
put image from file "images/logo.png" into tImage

// Get the image width
variable tWidth as Integer
put the width of tImage into tWidth

Tags: Canvas




Name: CanvasPropertyAntialias

Type: operator

Syntax: 	the antialias of <mCanvas>

Summary: The current antialias setting of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: A boolean value which determines whether or not antialiasing will be used when rendering paths on <mCanvas>.

Example:
// Disable antialiasing on the canvas
set the antialias of this canvas to false

Tags: Canvas




Name: GradientPropertyType

Type: operator

Syntax: 	the type of <mGradient>

Summary: The type of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The type of <mGradient> as a string. This can be one of "linear", "radial", "conical", "diamond", "spiral", "xy", "sqrtxy".

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

// Store the old gradient type
variable tType
put the type of tGradient into tType

// Change the gradient type to radial
set the type of tGradient to "radial"

Tags: Canvas




Name: EffectPropertyBlendMode

Type: operator

Syntax: 	the blend mode of <mEffect>

Summary: The blend mode of an effect.

mEffect: An expression which evaluates to an effect.

Description:
The blend mode of <mEffect> as a string. Can be any one of:
- clear
- copy
- source over
- source in
- source out
- destination over
- destination in
- destination out
- destination atop
- xor
- plus darker
- plus lighter
- multiply
- screen
- overlay
- darken
- lighten
- color dodge
- color burn
- soft light
- hard light
- difference
- exclusion
- hue
- saturation
- color
- luminosity

Example:
// Create an effect with blend mode "source over"
variable tProps as Array
put the empty array into tProps

put "source over" into tProps["blend mode"]

variable tEffect as Effect
put outer shadow effect with properties tProps into tEffect

// Use color dodge mode for effect
set the blend mode of tEffect to "color dodge"

Tags: Canvas

References: CanvasPropertyBlendMode(operator):




Name: FontOperationTextLayoutBoundsOnCanvas

Type: operator

Syntax: 	the [ layout ] bounds of text <mText> on <mCanvas>

Summary: Measure text when drawn to a canvas.

mText: An expression which evaluates to a string.

mCanvas: An expression which evaluates to a canvas.

Returns: The bounding box of <mText> when drawn at point 0,0 with the current font of <mCanvas>. Returns the bounds as a rectangle.

Example:
// Set the canvas font
set the font of this canvas to font "Arial" at size 18

variable tBounds as Rectangle
put the bounds of text "Sample text" on this canvas into tBounds

Description:
The layout bounds of the text, constructed from the ascent and descent values of the font, and the width of the text string.

>*Note:* The layout bounds is used to position blocks of text relative to each other, so the text may overlap these bounds.

Tags: Canvas




Name: CanvasOperationMeasureText

Type: statement

Syntax: 	measure <mText> on <mCanvas>

Summary: Measure text when drawn to a canvas.

mText: An expression which evaluates to a string.

mCanvas: An expression which evaluates to a canvas.

Returns: The bounding box of <mText> when drawn at point 0,0 with the current font of <mCanvas>. Returns the bounds as a rectangle in the result.

Example:
// Measure text drawn on the canvas
variable tBounds as Rectangle
measure "Sample text" on this canvas
put the result into tBounds

Tags: Canvas




Name: GradientPropertyFrom

Type: operator

Syntax: 	the from of <mGradient>

Summary: The from point of a gradient paint.

mGradient: An expression which evaluates to a gradient.

Description: The from point of <mGradient> as a point. Defines the starting point from which to begin drawing the gradient.

Example:
// Create new gradient paint
variable tGradient
put linear gradient with ramp [gradient stop at 0 with color [0,0,0], gradient stop at 1 with color [1,1,1]] into tGradient

variable tRect
put rectangle [ 20, 10, 120, 60 ] into tRect

// Set the start point of the gradient to the center of tRect
set the from of tGradient to point [(the left of tRect + the right of tRect) / 2, (the top of tRect + the bottom of tRect) / 2]

Tags: Canvas




Name: TransformMakeTranslation

Type: operator

Syntax: 	transform with translation <mTranslation>

Summary: Creates a new translation transform.

mTranslation: An expression which evaluates to a list of 2 numbers, the x and y offsets of the translation.

Returns: A new translation transform.

Example:
// Create translation transform to offset coordinates by 50,100
variable tTransform
put transform with translation [50,100] into tTransform

Tags: Canvas




Name: GradientStopMake

Type: operator

Syntax: 	gradient stop at <mOffset> with <mColor>

Summary: Creates a new gradient stop.

mOffset: An expression which evaluates to a number.

mColor: An expression which evaluates to a color.

Returns: A new gradient stop.

Example:
// List to hold gradient stops
variable tRamp
put the empty list into tRamp

// First gradient stop is red at position 0
push gradient stop at 0 with color [1,0,0] onto tRamp

// Second stop is half-transparent green at position 0.5
push gradient stop at 0.5 with color [0,1,0,0.5] onto tRamp

// Third stop is blue at position 1
push gradient stop at 1 with color [0,0,1] onto tRamp

Tags: Canvas




Name: TransformOperationMultiply

Type: operator

Syntax: 	<Left> * <Right>

Summary: Multiply two transforms together.

Left: An expression which evaluates to a transform.

Right: An expression which evaluates to a transform.

Description: 	Returns the transform created by concatentating <Left> with <Right>

Example:
// Create a rotation transform
variable tRotate
put transform with rotation by 45 into tRotate

// Create a scale transform
variable tScale
put transform with scale [2,3] into tScale

// Create a translation transform
variable tTranslate
put transform with translation [50,100] into tTranslate

// Combine transforms by multiplying them together
variable tTransform
put tTranslate * tRotate * tScale into tTransform

Note: 	The order of the arguments is important when multiplying transforms. <Left> * <Right> can result in a different transform from <Right> * <Left> (in mathematical terms, transform multiplication is non-commutative).

Tags: Canvas




Name: PointPropertyX

Type: operator

Syntax: 	the x of <mPoint>

Summary: The x coordinate of a point value.

mPoint: An expression which evaluates to a point.

Description: The x coordinate of <mPoint>.

Example:
variable tPoint
put point [50, 100] into tPoint

// Store the x-coordinate of the point in a variable
variable tX
put the x of tPoint into tX

// Move the point 10 units to the right
set the x of tPoint to (tX + 10)

Tags: Canvas




Name: ImageMakeFromData

Type: operator

Syntax: 	image from data <mData>

Summary: Creates a new image.

mData: An expression which evaluates to binary data

Returns: A new image decoded from the data provided.

Example:
// Load image from a block of data
variable tData
put the contents of file "images/logo.png" into tData

variable tImage
put image from data tData into tImage

Tags: Canvas




Name: ColorPropertyGreen

Type: operator

Syntax: 	the green of <mColor>

Summary: The green component of a color value.

mColor: An expression which evaluates to a color.

Description:
The green component of <mColor>

>*Note:* The component value denotes the intensity of that component, expressed as a real number between 0 and 1.

Example:
variable tColor
put color [0.75, 1.0, 0.5] into tColor

// Store the old green value
variable tGreen
put the green of tColor into tGreen

// Remove any green component from the color
set the green of tColor to 0

Tags: Canvas




Name: FontOperationTextImageBoundsOnCanvas

Type: operator

Syntax: 	the image bounds of text <mText> on <mCanvas>

Summary: Measure text precisely when drawn to a canvas.

mText: An expression which evaluates to a string.

mCanvas: An expression which evaluates to a canvas.

Returns: The bounding box of <mText> when drawn at point 0,0 with the current font of <mCanvas>. Returns the bounds as a rectangle.

Example:
// Set the canvas font
set the font of this canvas to font "Arial" at size 18

variable tBounds as Rectangle
put the image bounds of text "Sample text" on this canvas into tBounds

Description:
The exact bounds of the text, which will fully enclose each character.

>*Note:* This can be more time-consuming to compute than the layout bounds.

Tags: Canvas




Name: CanvasPropertyCapStyle

Type: operator

Syntax: 	the cap style of <mCanvas>

Summary: The current cap style of a canvas.

mCanvas: An expression which evaluates to a canvas.

Description: Determines how to draw the end points of a path when stroking. Can be one of "butt", "square", or "round".

Example:
// Draw a line with rounded ends.
set the cap style of this canvas to "round"
stroke line path from point [50,100] to point [100,50] on this canvas

Tags: Canvas
