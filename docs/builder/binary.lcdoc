Library: com.livecode.binary

Type: module

Summary: This library consists of the operations on binary strings provided by the standard library of Extension Builder.


Name: DataIsNotData

Type: operator

Syntax:     <Left> is not <Right>

Summary: Determines whether <Left> and <Right> are equal or not.

Left: An expression which evaluates to binary data.

Right: An expression which evaluates to binary data.

Returns: Returns false if the result of evaluating <Left> is the same as that of <Right>, and true otherwise.

Description: Performs a byte by byte comparison of <Left> and <Right>, returning true if there is any difference.

Tags: Binary




Name: EmptyData

Type: expression

Syntax: 	the empty data

Summary: Designates data of length 0.

Example:
variable tVar as Data
variable tCount as Number
put the empty data into tVar
put the number of bytes in tVar into tCount -- tCount is 0

Description: Use ```the empty data``` to initialise a data variable.

Tags: Binary




Name: DataIsLessThanData

Type: operator

Syntax:     <Left> &lt; <Right>

Summary: Determines whether <Left> is less than <Right> under a byte by byte comparison

Left: An expression which evaluates to binary data.

Right: An expression which evaluates to binary data.

Returns: True if <Left> is less than <Right>, and false otherwise.

Description: <Left> is less than <Right> if they are not equal, and the first byte in <Right> that is not equal to the corresponding byte in <Left> is of greater value.

Tags: Binary




Name: DataIsData

Type: operator

Syntax:     <Left> is <Right>

Summary: Determines whether <Left> and <Right> are equal or not.

Left: An expression which evaluates to binary data.

Right: An expression which evaluates to binary data.

Returns: Returns true if the result of evaluating <Left> is the same as that of <Right>, and false otherwise.

Description: Performs a byte by byte comparison of <Left> and <Right>, returning false if there is any difference.

Tags: Binary




Name: ConcatenateBytes

Type: operator

Syntax:     <Left> & <Right>

Summary: Concatenates <Left> and <Right>.

Left: An expression which evaluates to binary data.

Right: An expression which evaluates to binary data.

Returns: Binary data consisting of the value of the left hand expression with the value of the right hand expression appended to the end.

Description: The result consists of the bytes of <Left> followed by those of <Right>.

Tags: Binary




Name: PutBytesBefore

Type: statement

Syntax:     put <Source> before <Target>

Summary: Prepends <Source> bytes to <Target> bytes.

Source: An expression which evaluates to binary data.

Target: An expression which evaluates to a binary container.

Description: Use to insert bytes into data without replacement. Can be used either with a chunk expression to insert at a specified location, or without to prepend to the target data.

Tags: Binary




Name: DataIsGreaterThanData

Type: operator

Syntax:     <Left> &gt; <Right>

Summary: Determines whether <Left> is greater than <Right> under a byte by byte comparison

Left: An expression which evaluates to binary data.

Right: An expression which evaluates to binary data.

Returns: True if <Left> is greater than <Right>, and false otherwise.

Description: <Left> is greater than <Right> if they are not equal, and the first byte in <Left> that is not equal to the corresponding byte in <Right> is of greater value.

Tags: Binary




Name: PutBytesAfter

Type: statement

Syntax:     put <Source> after <Target>

Summary: Appends <Source> bytes to <Target> bytes.

Source: An expression which evaluates to binary data.

Target: An expression which evaluates to a binary container.

Related: PutBytesAfter

Description: Use to insert bytes into data without replacement. Can be used either with a chunk expression to insert at a specified location, or without to append to the target data.

Tags: Binary
