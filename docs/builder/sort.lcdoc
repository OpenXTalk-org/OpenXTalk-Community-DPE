Library: com.livecode.sort

Type: module

Summary: This library consists of the sorting operations provided by the standard library of Extension Builder.


Name: SortListAscendingText

Type: statement

Syntax:     sort <Target> in ascending text order

Summary: Sorts <Target> in ascending text order.

Target: An expression that evaluates to a list of strings.

Example:
    variable tTestList as List

	variable tChar
	repeat for each char tChar in "spoilage"
		push tChar onto tTestList
	end repeat

    sort tTestList in ascending text order
    variable tString as String
    combine tTestList with "" into tString -- tString is "aegilops"

Description:
Text sort is performed by comparing string elements on a codepoint by codepoint basis.
>*Note:* It is an error if <Target> contains any elements of non-string type.

Tags: Sorting




Name: SortListAscendingNumeric

Type: statement

Syntax:     sort <Target> in ascending numeric order

Summary: Sorts <Target> in ascending numeric order.

Target: An expression that evaluates to a list of numbers.

Example:
    variable tTestList as List
    put [3,4,5,1,2] into tTestList

    sort tTestList in ascending numeric order -- tTestList is [1,2,3,4,5]

Description:
Numeric sort is performed by comparing numeric elements by cardinality.
>*Note:* It is an error if <Target> contains any elements of non-numeric type.

Tags: Sorting




Name: SortListAscending

Type: statement

Syntax:     sort <Target> [in ascending order]

Summary: Sorts <Target> in ascending order.

Target: An expression that evaluates to a list.

Example:
    variable tTestList as List
	put [4,3,1,5,2] into tTestList

    sort tTestList -- tTestList is [1,2,3,4,5]

Description:
Generic sort is performed by comparing the elements of a homogeneous list according to the default comparison function associated to the type of its elements.
>*Note:* It is an error if <Target> is not homogeneous, i.e. if it contains any elements of differing type.

Tags: Sorting




Name: SortListDescendingBinary

Type: statement

Syntax:     sort <Target> in descending byte order

Summary: Sorts <Target> in descending binary order.

Target: An expression that evaluates to a list of binary data.

Description:
Binary sort is performed by comparing data elements on a byte by byte basis.
>*Note:* It is an error if <Target> contains any elements of non-data type.

Tags: Sorting




Name: SortListDescendingText

Type: statement

Syntax:     sort <Target> in descending text order

Summary: Sorts <Target> in descending text order.

Target: An expression that evaluates to a list of strings.

Example:
    variable tTestList as List
    put the empty list into tTestList

    push "abcd" onto tTestList
    push "xyz" onto tTestList

    sort tTestList in descending text order -- tTestList is ["xyz", "abcd"]

Description:
Text sort is performed by comparing string elements on a codepoint by codepoint basis.
>*Note:* It is an error if <Target> contains any elements of non-string type.

Tags: Sorting




Name: SortListDescendingNumeric

Type: statement

Syntax:     sort <Target> in descending numeric order

Summary: Sorts <Target> in descending numeric order.

Target: An expression that evaluates to a list of numbers.

Example:
    variable tTestList as List
    put [3,4,5,1,2] into tTestList

    sort tTestList in descending numeric order -- tTestList is [5,4,3,2,1]

Description:
Numeric sort is performed by comparing numeric elements by cardinality.
>*Note:* It is an error if <Target> contains any elements of non-numeric type.

Tags: Sorting




Name: SortListDescending

Type: statement

Syntax:     sort <Target> in descending order

Summary: Sorts <Target> in descending text order.

Target: An expression that evaluates to a list of strings.

Example:
   	variable tTestList as List
	put ["a", "b", "c"] into tTestList

    sort tTestList in descending order -- tTestList is ["c", "b", "a"]

Description:
Generic sort is performed by comparing the elements of a homogeneous list according to the default comparison function associated to the type of its elements.
>*Note:* It is an error if <Target> is not homogeneous, i.e. if it contains any elements of differing type.

Tags: Sorting




Name: SortListAscendingBinary

Type: statement

Syntax:     sort <Target> in ascending byte order

Summary: Sorts <Target> in ascending binary order.

Target: An expression that evaluates to a list of binary data.

Description:
Binary sort is performed by comparing data elements on a byte by byte basis.
>*Note:* It is an error if <Target> contains any elements of non-data type.

Tags: Sorting




Name: SortListUsingHandler

Type: statement

Syntax:     sort <Target> using handler <Handler>

Summary: Sorts <Target> using <Handler> as a comparison function.

Target: An expression that evaluates to a list.

Handler: A handler of type <SortCompare>

Example:
variable sKeyIndex as Number

private handler CompareListsByElement(in pLeft as any, in pRight as any) returns Integer
   variable tLeft as Number
   variable tRight as Number
   put pLeft[sKeyIndex] into tLeft
   put pRight[sKeyIndex] into tRight

   if tLeft > tRight then
      return 1
   else if tLeft < tRight then
      return -1
   else
      return 0
   end if
end handler

-- Sort lists according to value at specified index of each list
public handler TestSortListOfLists(in pList as List, in pKeyIndex as Number) returns List
   put pKeyIndex into sKeyIndex
   sort pList using handler CompareListsByElement
   return pList
end handler

Description:
<SortListUsingHandler> sorts a list by comparing the elements of a list according to the
comparison implemented by the <Handler> argument.

>*Note:* Supplying an inconsistent comparison operator to <SortListUsingHandler> causes
undefined behavior.

Tags: Sorting
