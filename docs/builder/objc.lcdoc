Library: com.livecode.objc

Type: module

Summary: This module provides utility handlers for converting to and from Obj-C types.


Name: ListFromNSArray

Type: handler

Syntax: ListFromNSArray(<pObjcArray>)

Summary: Convert a Objective-C array into a List

Parameters: 

pObjcNumber: The NSArray to convert

Returns:
A Number value

Description
Use <ListFromNSArray> to convert an Objective-C array object (NSArray) to
a variable of type List.



Name: ListToNSArray

Type: handler

Syntax: ListToNSArray(<pList>)

Summary: Convert a List into an Objective-C array

Parameters: 

pNumber: The List to convert

Returns:
A Objective-C object of type NSArray

Description
Use <ListToNSArray> to convert a variable of type List to an Objective-C
array object (NSArray).



Name: ArrayToNSDictionary

Type: handler

Syntax: ArrayToNSDictionary(<pArray>)

Summary: Convert an Array into an Objective-C dictionary

Parameters: 

pNumber: The Array to convert

Returns:
A Objective-C object of type NSDictionary

Description
Use <ArrayToNSDictionary> to convert a variable of type Array to an Objective-C
dictionary object (NSDictionary).



Name: NumberFromNSNumber

Type: handler

Syntax: NumberFromNSNumber(<pObjcNumber>)

Summary: Convert a Objective-C number into a Number

Parameters: 

pObjcNumber: The NSNumber to convert

Returns:
A Number value

Description
Use <NumberFromNSNumber> to convert an Objective-C number object (NSNumber) to
a variable of type Number.



Name: NumberToNSNumber

Type: handler

Syntax: NumberToNSNumber(<pNumber>)

Summary: Convert a Number into an Objective-C number

Parameters: 

pNumber: The Number to convert

Returns:
A Objective-C object of type NSNumber

Description
Use <NumberToNSNumber> to convert a variable of type Number to an Objective-C
number object (NSNumber).



Name: PointerFromObjcObject

Type: handler

Syntax: PointerFromObjcObject(<pObjcObject>)

Summary: Convert an ObjcObject into a Pointer

Parameters: 

pObjcObject: The ObjcObject to convert

Returns: The Pointer wrapped by the ObjcObject

Description:
Use <PointerFromObjcObject> to convert a variable of type ObjcObject to one of
type Pointer.



Name: CreateObjcInformalDelegate

Type: handler

Syntax: CreateObjcInformalDelegate(<pProtocol>,<pHandlerMapping>)

Summary: Create an Objective-C object with LCB implementations of methods of an informal protocol.

Example:
foreign handler Objc_NSPortMessageGetMsgId(in pMessage as ObjcId) returns UInt32 \
    binds to "objc:NSPort.-msgid"

handler HandlePortMessageCallback(in pMessage as ObjcId) returns nothing
    post "portMessage" with [Objc_NSPortMessageGetMsgId(pMessage)]
end handler

foreign handler Objc_NSPortDelegateHandlePortMessage(in pTarget as ObjcId, in pPortMessage as ObjcId) returns nothing \
    binds to "objc:.-handlePortMessage:"

public handler GetNSPortDelegate()
    return CreateObjcInformalDelegate([Objc_NSPortDelegateHandlePortMessage], \
                                      { "handlePortMessage:": \
                                        HandlePortMessageCalback })
end handler

Parameters: 

pProtocol: A list of foreign handlers which bind to protocol methods

pHandlerMapping: A mapping from the protocol's selector names to LCB handlers

Returns:
An Objective-C object which calls the appropriate LCB handler
on receiving any of the specified selectors. 

Description:
Use the <CreateObjcInformalDelegate> handler to create instances of 
Objective-C delegate classes with LCB implementations of protocol 
methods, when the Protocol object cannot be found at runtime. This 
occurs for example when all of the protocol methods are optional. 

Instead of a protocol name (as with <CreateObjcDelegate>), the 
<pProtocol> argument of <CreateObjcInformalDelegate> must be a proper 
list of foreign handlers for each of the methods of the protocol for 
which LCB callbacks are provided in the <pHandlerMapping> array.

Once created an informal delegate can be set in the usual way on an 
instance of the appropriate class (by binding to `-setDelegate:`), 
typically so that callbacks triggered by user interaction with a widget 
can be handled in LCB.

If any context is required to be passed as a parameter to the callback,
use <CreateObjcInformalDelegateWithContext>.

If the protocol can be resolved at runtime, it is generally easier to 
use the <CreateObjcDelegate> handler.

References:
CreateObjcDelegate (handler), CreateObjcDelegateWithContext (handler), 
CreateObjcInformalDelegateWithContext (handler)



Name: ArrayFromNSDictionary

Type: handler

Syntax: ArrayFromNSDictionary(<pObjcArray>)

Summary: Convert a Objective-C dictionary into a Array

Parameters: 

pObjcNumber: The NSDictionary to convert

Returns:
An Array value

Description
Use <ArrayFromNSDictionary> to convert an Objective-C dictionary object (NSDictionary) to
a variable of type Array.



Name: CreateObjcDelegateWithContext

Type: handler

Syntax: CreateObjcDelegateWithContext(<pProtocol>,<pHandlerMapping>,<pContext>)

Summary: Create an Objective-C object with LCB implementations of methods of a protocol.

Example:
handler NumberOfItemsInMenuCallback(in pContext as String, in pMenu as ObjcId) returns CLong
    -- pContext is the tag for this menu
    return the number of elements in mMenuArray[pContext]
end handler

public handler GetNSMenuDelegate(in pMenuTag as String) returns ObjcObject
    return CreateObjcDelegateWithContext("NSMenuDelegate", \
                                           { "numberOfItemsInMenu:": \
                                           NumberOfItemsInMenuCallback }, \
                                           pMenuTag)
end handler

Parameters: 

pProtocol: The name of the protocol

pHandlerMapping: A mapping from the protocol's selector names to LCB handlers

pContext: Any context required in the callback.

Returns:
An Objective-C object which calls the appropriate LCB handler
on receiving any of the specified selectors. 

Description:
Use the <CreateObjcDelegateWithContext> handler to create instances of 
Objective-C delegate classes with LCB implementations of protocol 
methods. Once created these can be set in the usual way on an instance 
of the appropriate class (by binding to `-setDelegate:`), typically so 
that callbacks triggered by user interaction with a widget can be
handled in LCB.

If no context is required to be passed as a parameter to the callback,
use <CreateObjcDelegate>.

Some protocols consist of purely optional methods. In this case the 
information about the protocol's methods are not available from the     
objective-c runtime API. In this situation 
<CreateObjcInformalDelegateWithContext> should be used instead.

References:
CreateObjcDelegate (handler), CreateObjcInformalDelegate (handler), 
CreateObjcInformalDelegateWithContext (handler)



Name: CreateObjcBlockPointerFromHandler

Type: handler

Syntax: CreateObjcBlockPointerFromHandler(<pHandler>,<rBlockPtr>)

Summary: Create an Objective-C block pointer that wraps an LCB handler.

Example:
private variable sRequestPermissionsCompletionHandler as optional ObjcBlockPointer
private variable sTarget as ScriptObject

public handler AudioLibraryInitialize() returns Boolean
	if not CreateObjcBlockPointerFromHandler(RequestPermissionsCompletionHandler, sRequestPermissionsCompletionHandler) then
		put nothing into sRequestPermissionsCompletionHandler
		return false
	end if
	put the caller into sTarget
	return true
end handler

private foreign handler ObjC_AVCaptureDeviceRequestAccessForMediaType(in pMediaType as ObjcId, in pCompletionHandler as ObjcBlockPointer) \
	returns nothing \
	binds to "objc:AVCaptureDevice.+requestAccessForMediaType:completionHandler:"

public handler AudioLibraryRequestPermissions()
	unsafe
		ObjC_AVCaptureDeviceRequestAccessForMediaType(StringToNSString("soun"), sRequestPermissionsCompletionHandler)
	end unsafe
end handler

public handler RequestPermissionsCompletionHandler(in pBlock as ObjcBlockPointer, in pGranted as CBool)
	post "AudioLibraryRequestPermissionsCallback" to sTarget with [pGranted]
end handler

Parameters: 

pHandler: The handler the block pointer should wrap.

rBlockPtr: The variable into which the block pointer should be returned.

Returns: True if the block pointer was successfully created, false otherwise.

Description:
Use the <CreateObjcBlockPointerFromHandler> handler to create a pointer to an
Objective-C block that wraps an LCB handler. The block pointer can be used in
calls to Objective-C foreign functions that expect a block as a parameter.

The wrapped handler will be called whenever the block is invoked, with the first
parameter of its signature being the block pointer. The remaining parameters
should match those of the Objective-C block.

The lifetime of a created `ObjcBlockPointer` is not automatically managed. When
such a value has no more references to it and it is no longer going to be used,
<DeleteObjcBlockPointer> should be used to free the resources used by it.

References: DeleteObjcBlockPointer (handler)




Name: CreateObjcDelegate

Type: handler

Syntax: CreateObjcDelegate(<pProtocol>,<pHandlerMapping>)

Summary: Create an Objective-C object with LCB implementations of methods of a protocol.

Example:
handler ControlIsValidObjectCallback(in pControl as ObjcId, in pObject as ObjcId) returns CSChar
    return 1
end handler

public handler GetNSControlTextEditingDelegate() returns ObjcObject
    return CreateObjcDelegate("NSControlTextEditingDelegate", \
                              { "control:isValidObject:": \
                                ControlIsValidObjectCallback })
end handler

Parameters: 

pProtocol: The name of the protocol

pHandlerMapping: A mapping from the protocol's selector names to LCB handlers

Returns:
An Objective-C object which calls the appropriate LCB handler
on receiving any of the specified selectors. 

Description:
Use the <CreateObjcDelegate> handler to create instances of Objective-C 
delegate classes with LCB implementations of protocol methods. Once 
created these can be set in the usual way on an instance of the 
appropriate class (by binding to `-setDelegate:`), typically so that 
callbacks triggered by user interaction with a widget can be handled in
LCB.

If any context is required to be passed as a parameter to the callback,
use <CreateObjcDelegateWithContext>.

Some protocols consist of purely optional methods. In this case the 
information about the protocol's methods are not available from the     
objective-c runtime API. In this situation <CreateObjcInformalDelegate> 
should be used instead.

References:
CreateObjcDelegateWithContext (handler), 
CreateObjcInformalDelegate (handler), 
CreateObjcInformalDelegateWithContext (handler)



Name: CreateObjcInformalDelegateWithContext

Type: handler

Syntax: CreateObjcInformalDelegateWithContext(<pProtocol>,<pHandlerMapping>,<pContext>)

Summary: Create an Objective-C object with LCB implementations of methods of an informal protocol.

Example:
foreign handler Objc_NSPortMessageGetMsgId(in pMessage as ObjcId) returns UInt32 \
    binds to "objc:NSPort.-msgid"

handler HandlePortMessageCallback(in pPortIndex as Integer, in pMessage as ObjcId) returns nothing
    post "portMessage" with [mPortList[pPortIndex]["name"], \
                             Objc_NSPortMessageGetMsgId(pMessage)]
end handler

foreign handler Objc_NSPortDelegateHandlePortMessage(in pTarget as ObjcId, in pPortMessage as ObjcId) returns nothing \
    binds to "objc:.-handlePortMessage:"

public handler GetNSPortDelegate(in pPortIndex as Integer)
    return CreateObjcInformalDelegateWithContext([Objc_NSPortDelegateHandlePortMessage], \
                                                 { "handlePortMessage:": \
                                                   HandlePortMessageCalback }, \
                                                 pPortIndex)
end handler

Parameters: 

pProtocol: A list of foreign handlers which bind to protocol methods

pHandlerMapping: A mapping from the protocol's selector names to LCB handlers

Returns:
An Objective-C object which calls the appropriate LCB handler
on receiving any of the specified selectors. 

Description:
Use the <CreateObjcInformalDelegateWithContext> handler to create instances of 
Objective-C delegate classes with LCB implementations of protocol 
methods, when the Protocol object cannot be found at runtime. This 
occurs for example when all of the protocol methods are optional. 

Instead of a protocol name (as with <CreateObjcDelegateWithContext>), 
the <pProtocol> argument of <CreateObjcInformalDelegateWithContext> must 
be a proper list of foreign handlers for each of the methods of the 
protocol for which LCB callbacks are provided in the <pHandlerMapping> 
array.

Once created an informal delegate can be set in the usual way on an 
instance of the appropriate class (by binding to `-setDelegate:`), 
typically so that callbacks triggered by user interaction with a widget 
can be handled in LCB.

If no context is required to be passed as a parameter to the callback,
use <CreateObjcInformalDelegate>.

If the protocol can be resolved at runtime, it is generally easier to 
use the <CreateObjcDelegateWithContext> handler.

References:
CreateObjcDelegate (handler), CreateObjcDelegateWithContext (handler), 
CreateObjcInformalDelegate (handler)



Name: DeleteObjcBlockPointer

Type: handler

Syntax: DeleteObjcBlockPointer(<pBlockPointer>)

Summary: Delete an Objective-C block pointer.

Example:
public handler AudioLibraryFinalize()
	if sRequestPermissionsCompletionHandler is not nothing then
		DeleteObjcBlockPointer(sRequestPermissionsCompletionHandler)
		put nothing into sRequestPermissionsCompletionHandler
	end if
end handler

Parameters: 

pBlockPointer:
An Objective-C block pointer created with
<CreateObjcBlockPointerFromHandler>

Description:
Use the <DeleteObjcBlockPointer> handler to delete an Objective-C block pointer
created with <CreateObjcBlockPointerFromHandler>

References: CreateObjcBlockPointerFromHandler (handler)




Name: DataToNSData

Type: handler

Syntax: DataToNSData(<pData>)

Summary: Convert a Data into an Objective-C data

Parameters: 

pData: The Data to convert

Returns:
A Objective-C object of type NSData

Description
Use <DataToNSData> to convert a variable of type Data to an Objective-C
data object (NSData).



Name: StringFromNSString

Type: handler

Syntax: StringFromNSString(<pObjcString>)

Summary: Convert a Objective-C string into a String

Parameters: 

pObjcString: The NSString to convert

Returns:
A String value

Description
Use <StringFromNSString> to convert an Objective-C string object (NSString) to
a variable of type String.



Name: PointerToObjcObject

Type: handler

Syntax: PointerToObjcObject(<pPointer>)

Summary: Convert a Pointer into an ObjcObject

Parameters: 

pPointer: The Pointer to convert

Returns: An ObjcObject wrapping the Pointer

Description:
Use <PointerToObjcObject> to convert a variable of type Pointer to one of type
ObjcObject.



Name: StringToNSString

Type: handler

Syntax: StringToNSString(<pString>)

Summary: Convert a String into an Objective-C string

Parameters: 

pString: The String to convert

Returns:
A Objective-C object of type NSString

Description
Use <StringToNSString> to convert a variable of type String to an Objective-C
string object (NSString).



Name: DataFromNSData

Type: handler

Syntax: DataFromNSData(<pObjcData>)

Summary: Convert a Objective-C data into a Data

Parameters: 

pObjcData: The NSData to convert

Returns:
A Data value

Description
Use <DataFromNSData> to convert an Objective-C data object (NSData) to
a variable of type Data.



