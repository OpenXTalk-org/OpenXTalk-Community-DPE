Library: com.livecode.bitwise

Type: module

Summary: This module specifies the bitwise operations on integers included in the standard library of Extension Builder.


Name: BitwiseShiftRight

Type: operator

Syntax:     <Operand> shifted right by <Shift> bitwise

Summary: Shifts the bits of <Operand> right.

Operand: An expression which evaluates to an integer.

Shift: An expression which evaluates to an integer.

Returns: The result of bit-shifting <Operand> right by <Shift> places.

Example:
variable tVar
put 7 shifted right by 2 bitwise into tVar -- tVar contains 1

Description:
Shifts the bits of <Operand> right. Shifting the bits of <Operand>
right by x is equivalent to dividing by 2^x (rounding down)

Tags: Bitwise operations




Name: BitwiseOr

Type: operator

Syntax:     <Left> bitwise or <Right>

Summary: Performs a bitwise OR operation on the binary representations of <Left> and <Right>.

Left: An expression which evaluates to an integer.

Right: An expression which evaluates to an integer.

Returns: The integer whose binary representation is the result of the bitwise OR operation.

Example:
variable tVar as Number
put 3 bitwise or 6 into tVar -- tVar contains 7

Description: Each bit of <Left> bitwise or <Right> is 0 if and only if both the corresponding bit of the binary representation of <Left> and that of <Right> is 0. Otherwise it is 1.

Tags: Bitwise operations




Name: BitwiseXor

Type: operator

Syntax:     <Left> bitwise xor <Right>

Summary: Performs a bitwise XOR operation on the binary representations of <Left> and <Right>.

Left: An expression which evaluates to an integer.

Right: An expression which evaluates to an integer.

Returns: The integer whose binary representation is the result of the bitwise XOR operation.

Example:
variable tVar as Number
put 3 bitwise xor 6 into tVar -- tVar contains 5

Description: Each bit of <Left> bitwise xor <Right> is 1 if and only if exactly one of the corresponding bits of the binary representation of <Left> and that of <Right> is 1. Otherwise it is 0.

Tags: Bitwise operations




Name: BitwiseAnd

Type: operator

Syntax:     <Left> bitwise and <Right>

Summary: Performs a bitwise AND operation on the binary representations of <Left> and <Right>.

Left: An expression which evaluates to an integer.

Right: An expression which evaluates to an integer.

Returns: The integer whose binary representation is the result of the bitwise AND operation.

Example:
variable tVar as Number
put 3 bitwise and 6 into tVar -- tVar contains 2

Description: Each bit of <Left> bitwise and <Right> is 1 if and only if both the corresponding bit of the binary representation of <Left> and that of <Right> is 1. Otherwise it is 0.

Tags: Bitwise operations




Name: BitwiseNot

Type: operator

Syntax:     bitwise not <Operand>

Summary: Performs a bitwise NOT operation on the binary representation of <Operand>.

Operand: An expression which evaluates to an integer.

Returns: The integer whose binary representation is the result of the bitwise NOT operation.

Example:
variable tVar as Number
put bitwise not -5 into tVar -- tVar contains 4

Description:
Bitwise not returns the complement of <Operand> as a signed two's
complement integer, i.e. equivalent to -(x + 1).

Tags: Bitwise operations




Name: BitwiseShiftLeft

Type: operator

Syntax:     <Operand> shifted left by <Shift> bitwise

Summary: Shifts the bits of <Operand> left.

Operand: An expression which evaluates to an integer.

Shift: An expression which evaluates to an integer.

Returns: The result of bit-shifting <Operand> left by <Shift> places.

Example:
variable tVar
put 7 shifted left by 2 bitwise into tVar -- tVar contains 28

Description:
Shifts the bits of <Operand> left. Shifting the bits of <Operand> left
by x is equivalent to multiplying by 2^x.

Tags: Bitwise operations
