Library: com.livecode.engine

Type: module

Summary: This library provides operations for interacting with LiveCode Script from LiveCode Builder.

Tags: Engine

Name: ScriptObject

Type: type

Syntax: ScriptObject

Summary: An opaque type corresponding to a LiveCode script object.

Description: Use the <ResolveScriptObject|resolve script object>, or <MyScriptObject|my script object> to obtain an object of type <ScriptObject>

References: ResolveScriptObject(statement), MyScriptObject(expression)

Tags: Script Engine


Name: ScriptObjectDoesNotExist

Type: operator

Syntax:     <Object> does not exist

Summary: Tests the existence of a script object.

Object: An expression that evaluates to a <ScriptObject>.

The result: True if the object <Object> exists, and false otherwise.

Example:
variable tObject as ScriptObject
resolve script object "card 5 of this stack"
put the result into tObject
if tObject does not exist then
	log "No such card"
end if

Description: Use to test the non-existence or otherwise of a script object, for example after attempting to resolve the object from a string using <ResolveScriptObject|resolve script object>

References: ResolveScriptObject(statement)

Tags: Script Engine




Name: SendToScriptObject

Type: statement

Syntax:     send ( function | command ) <Message> [ to <Object> ] [ with <Arguments> ]

Summary: Send a message to a script object.

Message: The message to dispatch.

Object: The script object to dispatch the message to.

Arguments: A list of arguments for the message.

The result: The result of the message dispatch

Example:
public handler OnMouseUp() returns nothing
	// Send a message to the script so it can handle it.
	send "buttonClicked" to my script object
end handler

Example:
// myScriptFunction takes three arguments and performs some kind of calculation

variable tObject as ScriptObject
resolve script object "this stack"
put the result into tObject
send function "myScriptFunction" to tObject with [ 2, 3, 4 ]

// the result contains the return value of 'myScriptFunction'

Description:
Sends a message to the given script object and waits for it to finish so that it
can return a value.

If no target object is specified, the message is sent to the widget's
script object (if used in a root widget module), or to the default stack
otherwise.

After a send, 'the message was handled' predicate can be used to determine if the
message passed through the message path untouched.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine




Name: PropertyOfScriptObject

Type: operator

Syntax:     property <Property> of <Object>

Summary: The property of a script object.

Property: The name of the property to manipulate

Object: An expression that evaluates to a <ScriptObject>.

Example:
public handler OnMouseUp() returns nothing
	set property "name" of my script object to "Clicked Widget"
end handler

Example:
resolve script object "this stack"
set property "invisible" of the result to true
    get property "script" of my script object

Description:
Use to manipulate properties of a script object.

>*Note:* An error is thrown if the script object does not exist.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine




Name: TheItemDelimiter

Type: expression

Syntax:     the item delimiter

Summary: Fetches the `itemDelimiter` property from script context

Example:
  -- Split a string into a list using the item delimiter
   variable tItems
   put "alice,bob,eve" into tItems
   split tItems by the item delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `itemDelimiter` property, or the comma
char if no script context is available.

Related: TheColumnDelimiter (expression), TheLineDelimiter (expression), TheRowDelimiter (expression)

Tags: Script Engine




Name: OwnerOfScriptObject

Type: operator

Syntax: 	the owner of <Object>

Summary: Get the parent object of a script object.

Object: An expression that evaluates to a <ScriptObject>.

The result: The <ScriptObject> that is the owner of <Object>.

Example:
public handler MyName() returns String
	get property "short name" of my script object
	return the result
end handler

public handler OnMouseUp() returns nothing
	// Send a message to the widget's parent so it can handle the click
	send "widgetClicked" to the owner of my script object with [ MyName() ]
end handler

Description:
Use to get the script object that contains a script object.

>*Note:* An error is thrown if the script object does not exist.

Tags: Script Engine




Name: TheColumnDelimiter

Type: expression

Syntax:     the column delimiter

Summary: Fetches the `columnDelimiter` property from script context

Example:
   -- Split a string into a list using the column delimiter
   variable tItems
   put "alice\tbob\teve" into tItems
   split tItems by the column delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `columnDelimiter` property, or horizontal
tab (U+0009) if no script context is available.

Related: TheRowDelimiter (expression), TheItemDelimiter (expression), TheLineDelimiter (expression)

Tags: Script Engine




Name: KeyIsDown

Type: expression

Syntax:     the ( shift |             command |             control |             alt |             option |             caps lock ) key is ( currently ) down

Summary: Returns true if the key is down

Returns: The state of the key

Description:
Use 'the ... key is down' to determine if the key was down at the start of the
current event. Use 'the ... key is currently down' to determine if the key is
down at the time it is being checked.

As in script, command and control keys return the state of the same key on non-macOS
systems while on macOS they are separate keys. Additionally alt and option are
different names for the same key.



Name: MessageWasHandled

Type: expression

Syntax:     the message was handled

Summary: Determines whether a message was handled

Example:
public handler OnMouseUp() returns nothing
	send "buttonClicked" to my script object
	if the message was handled then
		return
	end if
	log "The message was not handled"
end handler

Description: Determines if a dispatched message was handled by any script objects in the message path.

Tags: Script Engine




Name: TheLineDelimiter

Type: expression

Syntax:     the line delimiter

Summary: Fetches the `lineDelimiter` property from script context

Example:
  -- Split a string into a list using the line delimiter
   variable tItems
   put "alice\nbob\neve" into tItems
   split tItems by the line delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `lineDelimiter` property, or linefeed
(U+000A) if no script context is available.

Related: TheColumnDelimiter (expression), TheItemDelimiter (expression), TheRowDelimiter (expression)

Tags: Script Engine




Name: ChildrenOfScriptObject

Type: operator

Syntax: 	the children of <Object>

Summary: Get the child objects of a script object.

Object: An expression that evaluates to a <ScriptObject>

The result: A list of <ScriptObject>s that are contained within <Object>.

Example:
public handler GetSiblings(in pObject as ScriptObject) returns List
	// Return the sibling objects of an object
	return the children of the owner of pObject
end handler

Example:
// Unset the highlight of all the controls in a group
resolve script object "group \qcheckboxes\q of this card"
variable tObject
repeat for each element tObject in the children of the result
	set property "hilite" of tObject to false
end repeat

Description:
Use to get the script objects contained within a script object.

>*Note:* An error is thrown if the script object does not exist.

Tags: Script Engine




Name: ResolveFilePath

Type: statement

Syntax:     resolve file <FilePath> [ relative to <Object> ]

Summary: Resolves a file path relative to a script object.

FilePath: A string relative or full file path.

Object: The string describing the script object.

The result: The resolved file path string.

Example:
variable tObject as ScriptObject
resolve script object "this stack"
put the result into tObject
variable tIconPath as String
if tObject exists then
    resolve file "images/icon.png" relative to tObject
    put the result into tIconPath
end if

Description:
Use the <ResolveFilePath|resolve file path> statement to resolve a relative file
path in LCB using the same file path resolution semantics used by LCS.
If no object is specified the file path will be resolved relative to either
`the defaultStack` or if in a widget handler the stack the current widget is on.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine




Name: ResolveScriptObject

Type: statement

Syntax:     resolve script object <Object>

Summary: Resolves a string to a script object.

Object: The string describing the script object.

The result: The resolved script object.

Example:
variable tObject as ScriptObject
resolve script object "button 1 of card 1 of this stack"
put the result into tObject
if tObject exists then
	get property "name" of tObject
	log the result
else
	log "No such button"
end if

Description:
Use the <ResolveScriptObject|resolve script object> statement to obtain a <ScriptObject> in LiveCode Builder, in order to interact with it.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine




Name: Caller

Type: expression

Syntax:     the caller

Summary: The caller's script object

Example:
public handler NotifyMe() returns nothing
	post "notify" to the caller
end handler

Description:
Returns the script object which called the handler at the beginning
of the current chain of LiveCode Builder handler execution.

Tags: Script Engine




Name: ScriptObjectExists

Type: operator

Syntax:     <Object> exists

Summary: Tests the existence of a script object.

Object: An expression that evaluates to a <ScriptObject>.

The result: True if the object <Object> exists, and false otherwise.

Example:
variable tObject as ScriptObject
resolve script object "card 5 of this stack"
put the result into tObject
if tObject exists then
	set property "name" of tObject to "Card5"
else
	log "No such card"
end if

Description: Use to test the existence or otherwise of a script object, for example after attempting to resolve the object from a string using <ResolveScriptObject | resolve script object>

References: ResolveScriptObject(statement)

Tags: Script Engine




Name: MessageWasNotHandled

Type: expression

Syntax:     the message was not handled

Summary: Determines whether a message was handled

Example:
public handler OnMouseUp() returns nothing
	send "buttonClicked" to my script object
	if the message was not handled then
		log "The message was not handled"
	end if
end handler

Description: Determines if a dispatched message was handled by any script objects in the message path.

Tags: Script Engine




Name: TheRowDelimiter

Type: expression

Syntax:     the row delimiter

Summary: Fetches the `rowDelimiter` property from script context

Example:
  -- Split a string into a list using the row delimiter
   variable tItems
   put "alice\nbob\neve" into tItems
   split tItems by the row delimiter
   -- tItems is now a list: ["alice", "bob", "eve"]

Description:
Fetches the calling (script) handler's `rowDelimiter` property, or linefeed
(U+000A) if no script context is available.

Related: TheColumnDelimiter (expression), TheItemDelimiter (expression), TheLineDelimiter (expression)

Tags: Script Engine




Name: MyResourcesFolder

Type: expression

Syntax:     my resources folder

Summary: Returns the resources folder for the current module

Example:
    -- Work out the filename of a file in the module's
    -- resources folder.
    variable tResourceFile as String
    put my resources folder & "/foobar.txt" into tResourceFile

Description:
Returns the full path to the resources folder for the calling
module. If there is no resources folder attached to the calling
module, nothing is returned.

Tags: Script Engine




Name: ExecuteScript

Type: statement

Syntax: 	execute script <Script> [ in <Object> ] [ with <Arguments> ]

Summary: Executes some LiveCode script.

Script: The script to execute.

Object: The object to execute the script in.

Arguments: A list of arguments for the script.

Example:
public handler SnapshotMe() returns nothing
	variable tVar as String
	get property "number" of my script object
	put the result formatted as string into tVar

	// Create a snapshot from the rect of the widget
	execute script "import snapshot from rect (the rect of widget " & tVar & ") of widget " & tVar
end handler

Example:
   public handler SnapshotMeAtSize(in pWidth as Integer, in pHeight as Integer) returns nothing
		variable tVar as String
		get property "number" of my script object
		put the result formatted as string into tVar

		// Create a snapshot from the rect of the widget
		execute script "import snapshot from me at size at size param(1),param(2)" \
            with [ pWidth, pHeight ]
	end handler

Description:
Executes the given fragment of LiveCode script in the context of the target
script object. If no object is specified then execution occurs in the context of
`this card of the defaultStack` in a library handler or the current widget
instance script object if in a widget handler.

The list of arguments is accessible from the script fragment using the
`paramCount()` and `param()` functions.

>*Note:* An error is thrown if this syntax is used in a context where access
to script objects is not allowed.

Tags: Script Engine




Name: PostToScriptObject

Type: statement

Syntax:     post <Message> [ to <Object> ] [ with <Arguments> ]

Summary: Post a message to a script object.

Message: The message to dispatch.

Object: The script object to dispatch the message to.

Arguments: A list of arguments for the message.

Example:
public handler OnMouseUp() returns nothing
	// Send a message to the script so it can handle it.
	post "buttonClicked" to my script object
end handler

Description:
Post a message to the given script object and returns immediately. Posting a message
will cause the message to be sent at the next wait point (usually when the current
event has finished being handled).

If no target object is specified, the message is posted to the widget's
script object (if used in a root widget module), or to the widget's
parent (if used in a non-root widget module), or to the default stack
otherwise.

Tags: Script Engine




Name: Log

Type: statement

Syntax:     log <Value> [ with <Arguments> ]

Summary: Logs a value.

Value: The value to log.

Arguments: A list of arguments.

Example:
variable tList as List
get property "name" of my script object
push the result onto tList

get property "id" of my script object
push the result onto tList

log "Widget %@ has id %@" with tList

Example:
variable tList as List
put [1,2,3,4] into tList
log tList

Description:
The log command triggers a logChanged message with the 
accumulated log messages since the logChanged message 
was last handled.
This can be handled in LiveCode Script, for example:

    on logChanged pLog
        write pLog to stdout
    end logChanged

If using the 'with arguments' form, the <Value> must be a String.
Each occurrence of %@ in the String is replaced by a string
representation of subsequent values in the <Arguments> List.

Tags: Script Engine




