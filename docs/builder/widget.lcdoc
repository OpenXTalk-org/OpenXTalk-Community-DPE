Library: com.livecode.widget

Type: module

Summary: This library consists of the operations on widgets provided by LiveCode Builder.

Tags: Widget

Name: OnOpen

Type: message

Syntax: OnOpen

Summary: Sent when the card containing the widget becomes the current card.

Example:
public handler OnOpen()
  		-- Schedule a timer to perform an action every 5 seconds
 		 schedule timer in 5 seconds
end handler

Description: Handle the <OnOpen> message to have the widget perform an action when the card containing the widget becomes the current card, for example setting default values of instance variables.

Name: OnClose

Type: message

Syntax: OnClose

Summary: Sent when card containing the widget is navigated away from.

Example:
public handler OnClose()
  		-- Schedule a timer to perform an action every 5 seconds
 		 cancel timer
end handler

Description: Handle the <OnClose> message to have the widget perform an action when the card containing the widget is navigated away from.

Name: OnAttach

Type: message

Syntax: OnAttach

Summary: Sent when the widget is attached.

Name: OnDetach

Type: message

Syntax: OnDetach

Summary: Sent when the widget is detached.

Name: OnPaint

Type: message

Syntax: OnPaint

Summary: Sent when the widget is to be drawn.

Example:
public handler OnPaint()
	variable tCirclePath as Path
	put circle path centered at point [the width of my bounds/2,the height of my bounds/2] with radius (the width of my bounds/2) into tFacePath
	set the paint of this canvas to solid paint with color [1, 0, 1]
	fill tFacePath on this canvas
end handler

Description:
Handle the <OnPaint> message to draw the widget when it needs to be updated.
>*Note:* Access to most script object operations is not allowed whilst an OnPaint
handler is running.

References: RedrawAll(statement)

Name: OnGeometryChanged

Type: message

Syntax: OnGeometryChanged

Summary: Sent when the widget geometry changed.

Example:
private variable mLabel as String

public handler OnGeometryChanged()
	if my width is not my height then
		put "Rectangle" into mLabel
	else
		put "Square" into mLabel
	end if
	redraw all	
end handler

Description: Handle the <OnGeometryChanged> message to perform specific actions that depend on the geometry of the widget, for example the locations on the canvas where parts of the widget are drawn.

Name: OnVisibilityChanged

Type: message

Syntax: OnVisibilityChanged <isVisible>

Summary: Sent when the widget visibility changed.

Parameters: 

isVisible(bool): Whether the widget is now visible or not.

Example:
private variable mAnimate as Boolean

public handler OnVisibilityChanged(in pVisible as Boolean)
	put pVisible into mAnimate
end handler

Description: Handle the <OnVisibilityChanged> message to execute code when the widget becomes visible or invisible.

Name: OnSave

Type: message

Syntax: OnSave

Summary: Sent when the widget is saved.

Description:
Handler the <OnSave> message to execute code when a stack containing the widget is saved.
>*Note:* Access to most script object operations is not allowed whilst an <OnSave>
handler is running.

Name: OnLoad

Type: message

Syntax: OnLoad

Summary: Sent when the widget is loaded.

Description:
Handler the <OnLoade> message to execute code when a stack containing the widget is loaded, for example setting default values of instance variables.
>*Note:* Access to most script object operations is not allowed whilst an <OnLoad>
handler is running.

Name: OnCreate

Type: message

Syntax: OnCreate

Summary: Sent when the widget is created.

Example:
private variable mPrimaryColor as Color
private variable mSecondaryColor as Color

public handler OnCreate()
	put color [ 0.5, 0.5, 1.0 ] into mPrimaryColor
	put color [ 0.0, 0.0, 1.0 ] into mSecondaryColor
end handler

Description:
Handle the <OnCreate> message to have the widget perform an action when it is created, for example setting default values of instance variables.
>*Note:* Access to most script object operations is not allowed whilst an <OnCreate>
handler is running.

Name: OnDestroy

Type: message

Syntax: OnDestroy

Summary: Sent when the widget is deleted.

Description: Handle the OnDestroy message to have the widget perform an action when it is deleted.

Name: OnParentPropertyChanged

Type: message

Syntax: OnParentPropertyChanged

Summary: Sent when a property of the widget parent is changed.

Description: Handle the <OnParentPropertyChanged> message when a widget property depends on the properties of a parent object.

Name: OnStopEditing

Type: message

Syntax: OnStopEditing

Summary: Sent when the browse tool is selected.

Description: Handle the <OnStopEditing> message to perform an action when the browse tool is selected.

Name: OnStartEditing

Type: message

Syntax: OnStartEditing

Summary: Sent when the pointer tool is selected.

Description: Handle the <OnStartEditing> message to perform an action when the edit tool is selected.

Name: OnLayerChanged

Type: message

Syntax: OnLayerChanged

Summary: Sent when the widget layer is changed.

Name: OnTimer

Type: message

Syntax: OnTimer

Summary: Sent when a timer message has been scheduled.

Example:
// Create a timer loop
public handler OnTimer()
	...
	schedule timer in 1 seconds
end handler

Description:
Handle the <OnTimer> message to perform an action at a scheduled time.
>*Note:* OnTimer messages are only sent whilst in browse tool mode. If a timer is
delivered whilst in pointer tool mode it will be deferred until browser tool mode is
re-entered.

References: ScheduleTimerIn(statement)

Name: OnMouseEnter

Type: message

Syntax: OnMouseEnter

Summary: Sent when the mouse pointer enters the widget's rect.

Name: OnMouseLeave

Type: message

Syntax: OnMouseLeave

Summary: Sent when the mouse pointer leaves the widget's rect.

Name: OnMouseMove

Type: message

Syntax: OnMouseMove

Summary: Sent when the mouse pointer moves within the widget's rect.

Name: OnMouseCancel

Type: message

Syntax: OnMouseCancel

Summary:
Sent when something happens which should cause the previous mouse down
action to be considered cancelled. For example, opening a popup during OnMouseDown.

Name: OnMouseDown

Type: message

Syntax: OnMouseDown

Summary: Sent when the mouse button is pushed within the widget's rect.

Name: OnMouseUp

Type: message

Syntax: OnMouseUp

Summary: Sent when the user releases the mouse button.

Example:
public handler OnMouseUp() returns nothing
    if the mouse position is not within my bounds then
       return
    end if

    if the click button is 1 then
       -- do primary button action
    else
       -- do secondary button action
    end if
end handler

Description:
The <OnMouseUp> message is sent when a mouse button is released.

**Note:** A widget may receive the <OnMouseUp> message even if the
mouse pointer isn't within the widget's bounds.

References: TheClickButton(expression), TheMouseLocation(expression)

Name: OnMouseScroll

Type: message

Syntax: OnMouseScroll

Summary: Sent when the mouse wheel is scrolled within the widget's rect.

Name: OnMouseHover

Type: message

Syntax: OnMouseHover

Summary: Sent when the mouse pointer hovers over the widget's rect.

Name: OnMouseStillHover

Type: message

Syntax: OnMouseStillHover

Summary: Sent when the mouse pointer continues to hover over the widget's rect.

Name: OnMouseCancelHover

Type: message

Syntax: OnMouseCancelHover

Summary: Sent when the mouse pointer continues to hover outside of the widget's rect.

Name: OnTouchStart

Type: message

Syntax: OnTouchStart

Summary: Sent when the widget is the target for touch events and a touch is started.

Description:
The widget becomes the target for touch events when the first touch is
within its rect. The widget remains the target for touch events until
all touches end or are cancelled.

Name: OnTouchMove

Type: message

Syntax: OnTouchMove

Summary: Sent to the target for touch events when a touch moves.

Name: OnTouchFinish

Type: message

Syntax: OnTouchFinish

Summary: Sent to the target for touch events when a touch event ends.

Name: OnTouchCancel

Type: message

Syntax: OnTouchCancel

Summary: Sent to the target for touch events when a touch event is cancelled.

Name: OnFocusEnter

Type: message

Syntax: OnFocusEnter

Summary: Sent when the widget gains focus.

Name: OnFocusLeave

Type: message

Syntax: OnFocusLeave

Summary: Sent when the widget loses focus.

Name: OnKeyPress

Type: message

Syntax: OnKeyPress <keyText>

Summary: Sent when a key is pressed while the widget has focus.

Parameters: 

keyText(string): The key pressed

Name: OnModifiersChanged

Type: message

Syntax: OnModifiersChanged

Summary: Sent when the keyboard modifiers are changed.

Name: OnActionKeyPress

Type: message

Syntax: OnActionKeyPress <keyText>

Summary: Sent when an action key is pressed while the widget has focus.

Parameters: 

keyText(string): The key pressed

Name: OnDragEnter

Type: message

Syntax: OnDragEnter

Summary: Sent when an object is dragged onto the widget rect.

Name: OnDragLeave

Type: message

Syntax: OnDragLeave

Summary: Sent when an object is dragged outside of the widget rect.

Name: OnDragMove

Type: message

Syntax: OnDragMove

Summary: Sent when a dragged object is moved within the widget rect.

Name: OnDragDrop

Type: message

Syntax: OnDragDrop

Summary: Sent when a dragged object is released within the widget rect.

Name: OnDragStart

Type: message

Syntax: OnDragStart

Summary: Sent when the widget begins to be dragged

Name: OnDragFinish

Type: message

Syntax: OnDragFinish

Summary: Sent when the widget finishes being dragged

Name: OnClick

Type: message

Syntax: OnClick

Summary: Sent when the widget is clicked.

Name: OnDoubleClick

Type: message

Syntax: OnDoubleClick

Summary: Sent when the widget is double-clicked.


Name: IsPoppedUp

Type: expression

Syntax: 	currently popped up

Summary: Tests if the current widget is in a popup window.

Resturns: True if the current widget is in a popup window, False otherwise.

Example:
variable mSelected

public handler OnClick()
	variable tOption
	put getOptionAtPosition(the click position) into tOption
	if tOption is not empty then
		put tOption into mSelected

		// If this widget is being used as a popup then we close the popup and return a value to the caller
		if currently popped up then
			if mSelected is "Cancel" then
				// Dismiss the popup without returning a value - the result will be nothing
				close popup
			else
				// Dismiss the popup - the result will be the value of mSelected
				close popup returning mSelected
			end if
		end if
	end if
end handler

private handler getOptionAtPosition(in pPosition as Point) returns String
	// Return the name of the option at the given point
	...
end handler

Description:
Use to determine if this widget is being displayed within a popup window.

References: PopupWidget(statement), ClosePopupWithResult(statement)



Name: IsEditMode

Type: expression

Syntax:   in edit mode

Summary: Determines whether the IDE is in edit mode.




Name: PlaceWidgetRelative

Type: statement

Syntax:     place <mWidget> ( below | above ) <mOtherWidget>

Summary: Add a child widget to the parent on a layer relative to that of a previously placed child.

mWidget: The child widget object.

mOtherWidget: The child to place <mWidget> relative to.

Example:
variable tNavbar as Widget
put a new widget "com.livecode.widget.navbar" into tNavbar
place tNavbar

variable tTreeView as Widget
put a new widget "com.livecode.widget.treeView" into tTreeView
place tTreeView below tNavbar

Description:
Adds a the specified child object to the widget in which the place statement is used. <mWidget> is placed either below or above
the layer on which <mOtherWidget> is placed, depending on which variant is used.



Name: WidgetRectangleProperty

Type: operator

Syntax: 	the rectangle of <mWidget>

Summary: Manipulates the rectangle property of a child widget

mWidget: The child widget object

Example:
private variable mChild as Widget

public handler OnCreate() returns nothing
    put a new widget "com.livecode.widget.button" into mChild
    place mChild
end handler

public handler OnGeometryChanged() returns nothing
    -- ensure child widget rect is that of the parent
    set the rectangle of mChild to my bounds
end handler

Description: Use the rectangle property to set the rectangle of a child widget.




Name: PopupWidget

Type: statement

Syntax: 	popup widget <Kind> at <Location> [ with properties <Properties> ]

Summary: Opens a widget within a popup window.

Kind: The unique identifier of the widget to use for the popup.

Location: An expression that evaluates to a <Point> relative to the current widget. The topleft corner of the popup window will be placed here.

Properties: An expression that evaluates to an <array>. For each key of the array, the popup widget will be initialized by setting that property to the value for that key.

The result: The result returned by the popup. If the popup is dismissed (by clicking outside the bounds of the popup) this value will be nothing.

Example:
private variable mColor as Color

public handler OnClick()
	variable tProperties as Array
	put the empty array into tProperties
	put mColor into tProperties["currentColor"]

	popup widget "com.livecode.widget.ColorPicker" at the mouse position with properties tProperties
	if the result is not nothing then
		put the result into mColor
		redraw all
	end if
end handler

public handler OnPaint()
	...
	set the paint of this canvas to solid paint with color mColor
	...
end handler

Description: 	Use to display a widget within a popup window, for example as a tooltip or picker dialog.

References: IsPoppedUp(expression), ClosePopupWithResult(statement), IsDefined(operator)




Name: TheTouchIDs

Type: expression

Syntax:     the touch ids

Summary: The touch IDs

Returns: The a list of currently active touch IDs

Example:
variable tIDs as optional List
put the touch ids into tIDs
if tIDs is not nothing then
    variable tPosition as Point
    put the position of touch tIDs[1] into tPosition
end if



Name: TheClickCount

Type: expression

Syntax:     the ( current ) click count

Summary: Determines the number of successive clicks within the click distance.

Returns: The number of clicks which have occurred since the initial click within the standard 'click distance' from the original point.

Example:
    variable tClickCount as integer
    put the click count into tClickCount

    if tClickCount is 1 then
        // do single click action
    else if tClickCount is 2 then
        // do double click action
    end if



Name: MyNativeLayer

Type: expression

Syntax: 	my native layer

Summary: Get the current widget's native layer pointer

Returns: A platform-specific native layer pointer

References: NativeLayerOfWidget (operator)

Tags: Native layer




Name: MyEnabled

Type: expression

Syntax:     my enabled

Summary: Returns the enabled state of the widget.

Returns: The enabled state of the widget.




Name: MyBounds

Type: expression

Syntax:   my bounds

Summary: Returns the bounds of the widget.

Returns: The bounds of the widget.




Name: UnplaceWidget

Type: statement

Syntax:     unplace <mWidget>

Summary: Remove a child widget from the parent.

mWidget: The child widget object.

Example:
-- Remove any child widgets that are clicked on
public handler OnMouseUp() returns nothing
    if the target is not nothing then
        unplace the target
    end if
end handler

Description:
Unplaces the child widget from the widget in which the unplace statement is used.
The widget is no longer drawn.



Name: TheTarget

Type: expression

Syntax:     the target

Summary: The child widget that started the current execution.

Returns: A widget object.

Example:
-- In the child widget
public handler OnMouseUp() returns nothing
    -- handled in the parent
end handler

-- in the parent
public handler OnMouseUp() returns nothing
    variable tComponent as optional Widget
    put the target into tComponent
    if tComponent is not nothing then
        variable tName as String
        put annotation "Name" of tComponent into tName
        -- notify the parent or the script object which component was clicked
        post "componentClicked" with [tName]
    else
        -- the mouseUp was not over a child widget
    end if
end handler

Example:
-- In the child widget
public handler OnClick() returns nothing
    post "componentClicked"
end handler

-- In the parent widget
public handler OnComponentClicked() returns nothing
    variable tComponent as optional Widget
    put the target into tComponent
    if tComponent is not nothing then
        variable tName as String
        put annotation "Name" of tComponent into tName
        -- notify the parent or the script object which component was clicked
        post "componentClicked" with [tName]
    end if
end handler

Description:
The target evaluates to either the first widget object in a chain of event handlers (eg <OnMouseUp>)
or the widget from which a message was <Post|posted>.



Name: MyPixelScale

Type: expression

Syntax:     my pixel scale

Summary: Returns the scaling factor of pixels for the widget

Description:
Use the widget's pixel scale to calculate the size of an image to draw. For example,
when drawing an image to `my bounds` create an image sized using
`my width * my pixel scale, my height * my pixel scale` otherwise the image will be
stretched to match the pixel scale. The pixel scale is a per-window/screen property
so may change if the user moves a window to a new screen.

Returns: The current scaling factor of pixels for the widget




Name: TriggerAll

Type: statement

Syntax:   trigger all [ in <mWidget> ]

Summary: Causes all of a widget's property triggers to be fired.

mWidget: An expression that evaluates to a widget.

Example:
handler TextChangedCallback()
        UpdateTextProperty()
        trigger all
end handler

Example:
private variable mSelf as Widget
handler TextChangedCallback()
	UpdateTextProperty()
	trigger all in mSelf
end handler

Description:
Use trigger all to cause all triggers for all a widget's properties to 
be fired, for example when user action causes a native widget's 
properties to change, to signal the property change to the IDE.



Name: MyFont

Type: expression

Syntax:     my font

Summary: Returns the font of the widget.

Returns: The font of the widget

Description:
Use to return a font which reflects the current (effective) settings of the
widget's textFont, textSize and textStyle properties.



Name: TheMouseLocation

Type: expression

Syntax:   the ( current ) mouse position

Summary: Determines the location of the mouse pointer relative to the widget.

Returns: The location of the mouse pointer.

Example:
variable tPosition as Point
put the mouse position into tPosition

variable tRect as Rectangle
put my bounds into tRect

if tPosition is within tRect then
	// mouse position is within the widget bounds
end if

Description: Use the 'current' form to obtain the asynchronous mouse position.




Name: CancelTimer

Type: statement

Syntax:   cancel timer

Summary: Cancels a timer.

Example:
// Cancel the timer when the widget is no longer on the current card.
public handler OnClose()
	cancel timer
end handler

Description: Use to cancel a timer scheduled by the <ScheduleTimerIn|schedule> statement.

References: OnTimer(message), ScheduleTimerIn(statement)




Name: PopupMenu

Type: statement

Syntax: 	popup menu <mMenu> at <mAt>

Summary: Displays a popup menu.

Menu: An expression that evaluates to a string, which describes the menu items.

Location: An expression that evaluates to a <Point> relative to the current widget. The topleft corner of the popup window will be placed here.

The result: The selected menu item. If the menu is dismissed (by clicking outside the bounds of the menu) this value will be nothing.

Example:
private variable mFont as Font

public handler OnMouseDown()
	popup menu "Helvetica\nTimes New Roman\nArial" at the mouse position
	if the result is not nothing then
		put font (the result) at size 20 into mFont
		redraw all
	end if
end handler

public handler OnPaint()
	...
	set the font of this canvas to mFont
	...
end handler

Description: 	Use to popup a menu at the specified location.




Name: TheClickLocation

Type: expression

Syntax:   the ( current ) click position

Summary: Determines the location of a mouse click.

Returns: The location of the mouse pointer when it was clicked.

Example:
variable tClick as Point
put the click position into tClick

variable tRect as Rectangle
put my bounds into tRect

if tClick is within tRect then
	// click was within widget bounds
end if

Description: Use the mouse location to obtain the location of the mouse pointer when it was last clicked. Use the 'current' form to obtain the asynchronous click position.




Name: WidgetLocationProperty

Type: operator

Syntax: 	the location of <mWidget>

Summary: Manipulates the location property of a child widget

mWidget: The child widget object

Example:
private variable mChild as Widget

public handler OnCreate() returns nothing
    -- place the child widget at the center of this widget
    variable tLoc as Point
    put point [my width / 2, my height / 2] into tLoc
    put a new widget "com.livecode.widget.button" into mChild
    place mChild
    set the location of mChild to tLoc
end handler

Description:
Use the location property to set the location of a child widget relative to the top left of the parent.
The location property is of type com.livecode.canvas.Point.



Name: PlaceWidgetAt

Type: statement

Syntax:     place <mWidget> at ( bottom | top )

Summary: Add a child widget to the parent on the top or bottom layer

mWidget: The child widget object.

Example:
variable tNavbar as Widget
put a new widget "com.livecode.widget.navbar" into tNavbar
place tNavbar at top

Description:
Adds a the specified child object to the widget in which the place statement is used.
Using the "top" (resp. "bottom") variant will cause <mWidget> to be placed on the layer above (resp. below) all previously placed widgets.



Name: TheNumberOfTouches

Type: expression

Syntax:     the number of touches

Summary: The number of touches

Returns: The number of currently active touches

Example:
   if the number of touches is 2 then
      // pinch gesture
   end if



Name: PropertyOfWidget

Type: operator

Syntax: 	property <mName> of <mWidget>

Summary: Manipulates a property implemented by a child widget.

mName: The name of a property declared by <mWidget>

mWidget: The child widget object

Example:
variable tChild as Widget
put a new widget "com.livecode.widget.navbar" into tChild
place tChild
-- Initialise selected element of nav bar to 1
set property "selectedItem" of tChild to 1

Description:
Use the <PropertyOfWidget> operator to get or set properties of a child widget that are not and of the built-in
widget properties.



Name: MyName

Type: expression

Syntax: 	my name

Summary: Returns the name of the widget's script object

Returns: The name of the widget's script object




Name: TheTouchId

Type: expression

Syntax:     the touch id

Summary: The id of the current touch

Returns: An integer id for the current touch

Example:
   variable tID as Number
   put the touch id into tID

   variable tPosition as Point
   put the position of touch tID into tPosition



Name: PlaceWidget

Type: statement

Syntax:     place <mWidget>

Summary: Add a child widget to the parent.

mWidget: The child widget object.

Example:
variable tNavbar as Widget
put a new widget "com.livecode.widget.navbar" into tNavbar
place tNavbar

Description:
Adds a the specified child object to the widget in which the place statement is used.
<mWidget> will reside on the layer above all previously placed widgets.



Name: NativeLayerOfWidget

Type: operator

Syntax: 	native layer of <Widget>

Summary: Get a widget's native layer pointer

Parameters: 

Widget: The widget to examine

Returns: A platform-specific native layer pointer

References: MyNativeLayer (expression)

Tags: Native layer




Name: TheLocationOfTouch

Type: operator

Syntax:     the position of touch <Id>

Summary: The location of a specific touch

Returns: The positon of a specific touch id relative to the widget

Example:
   variable tID as Number
   put the touch id into tID

   variable tPosition as Point
   put the position of touch tID into tPosition



Name: IsPointWithinRect

Type: operator

Syntax:   <Point> is within <Rect>

Summary: Determines whether a point is within a rectangle.

Point: An expression that evaluates to a Point.

Rect: An expression that evaluates to a Rectangle.

Example:
variable tClick as Point
put the click position into tClick

variable tRect as Rectangle
put my bounds into tRect

if tClick is within tRect then
	// click was within widget bounds
end if



Name: MyHeight

Type: expression

Syntax:   my height

Summary: Returns the height of the widget.

Returns: The height of the widget.




Name: MyChildren

Type: expression

Syntax:     my children

Summary: The currently placed child widgets of this widget.

Returns: A list of the child widgets of this widget.

Example:
public handler OnCreate() returns nothing
    repeat 10 times
        place a new widget "com.livecode.widget.button"
    end repeat
end handler

public handler OnGeometryChanged() returns nothing
    variable tChildren as List
    put my children into tChildren

    variable tChild as Widget
    variable tLeft as Number
    put 0 into tLeft
    -- arrange children from left to right
    repeat for each element tChild in tChildren
        set the rectangle of tChild to [tLeft, 0, tLeft + 50, my height]
        add 50 to tLeft
    end repeat
end handler

Description: The list of widget objects returned by <MyChildren|my children> is in placement (i.e. layer) order.




Name: AnnotationOfWidget

Type: operator

Syntax: 	annotation <mName> of <mWidget>

Summary: Manipulates an annotation of a child widget

Example:
-- variable storing the last child widget the mouse was over
variable mLastChild as String

public handler OnCreate() returns nothing
    variable tChildWidget as Widget
    variable tCount as Number
    repeat with tCount from 1 up to 10
        put a new widget "com.livecode.widget.button" into tChildWidget
        set annotation "Name" of tChildWidget to ("Child" && tCount formatted as string)
    end repeat
end handler

public handler OnMouseEnter() returns nothing
    if the target is not nothing then
        put annotation "Name" of the target into mLastChild
    end if
end handler

Description:
An annotation is a named value assigned to a widget. They do not affect any intrinsic properties of the widget are are intended
to be used to disambiguate widget objects returned from operators such as <TheTarget> or <MyChildren>.

References: TheTarget (operator), MyChildren (operator)




Name: MyRectangle

Type: expression

Syntax:   my rectangle

Summary: Returns the rectangle of the widget in the parent

Returns: The rectangle of the widget in the parent




Name: MyWidth

Type: expression

Syntax:   my width

Summary: Returns the width of the widget.

Returns: The width of the widget.




Name: ClosePopupWithResult

Type: statement

Syntax: 	close popup [ returning <Result> ]

Summary: Closes the current widget popup.

Result: An expression that evaluates to any type. The result of popping up this widget.

Example:
variable mSelected

public handler OnClick()
	variable tOption
	put getOptionAtPosition(the click position) into tOption
	if tOption is not empty then
		put tOption into mSelected

		// If this widget is being used as a popup then we close the popup and return a value to the caller
		if currently popped up then
			if mSelected is "Cancel" then
				// Dismiss the popup without returning a value - the result will be nothing
				close popup
			else
				// Dismiss the popup - the result will be the value of mSelected
				close popup returning mSelected
			end if
		end if
	end if
end handler

private handler getOptionAtPosition(in pPosition as Point) returns String
	// Return the name of the option at the given point
	...
end handler

Description: 	Use to close the current popup, and optionally set a return value for the <PopupWidget> statement that launched it.

References: PopupWidget(statement), IsPoppedUp(expression)




Name: ThisWidget

Type: expression

Syntax: 	this widget

Summary: Returns the current widget.

Returns: A widget object.

Example:
-- In a widget
private variable mSelf as Widget
public handler OnCreate() returns nothing
	-- Keep a reference to this widget
	put this widget into mSelf

	-- defined in separate module library
	SetEventCallback(EventCallback)
end handler

-- may be called from another module library
private handler EventCallback() returns nothing
	-- update internal variables

	-- notify ide of changes
	trigger all in mSelf
end handler

Description:
This widget evaluates to the current widget. This can be used to retain a
reference for occasions where widget handlers may be called from another module,
where the current widget may not be valid.

This is useful when LCB handlers within a widget module are used as
asynchronous callback functions passed to foreign functions, as these may be
called at a time when the widget is not the currently active widget. Using the
reference prevents updates being seen as coming from the wrong widget.



Name: ScheduleTimerIn

Type: statement

Syntax:   schedule timer in <Time> seconds

Summary: Schedules a timer.

Time: An expression which evaluates to a number.

Example:
// Create a timer loop
public handler OnTimer()
	...
	schedule timer in 1 seconds
end handler

Description: Scheduling a timer causes an <OnTimer> message to be sent to the widget in <Time> seconds.

References: OnTimer(message)




Name: ANewWidget

Type: operator

Syntax:     a new widget <mKind>

Summary: Create a widget object of the specified kind

Returns: A widget object.

Example:
variable tNavbar as Widget
put a new widget "com.livecode.widget.navbar" into tNavbar

Description: Create a new widget object of the specified kind. The widget can then be placed with the <PlaceWidget|place> statement.

References: PlaceWidget (statement)




Name: IsPointNotWithinRect

Type: operator

Syntax:   <Point> is not within <Rect>

Summary: Determines whether a point is within a rectangle.

Point: An expression that evaluates to a Point.

Rect: An expression that evaluates to a Rectangle.

Example:
variable tClick as Point
put the click position into tClick

variable tRect as Rectangle
put my bounds into tRect

if tClick is not within tRect then
	// click was outside of widget bounds
end if



Name: WidgetWidthProperty

Type: operator

Syntax: 	the width of <mWidget>

Summary: Manipulates the height property of a child widget

mWidget: The child widget object

Example:
private variable mChild as Widget

public handler OnCreate() returns nothing
    put a new widget "com.livecode.widget.button" into mChild
    place mChild
end handler

public handler OnGeometryChanged() returns nothing
    -- ensure child widget remains half the width of the parent
    set the width of mChild to my width / 2
end handler

Description: Use the width property to set the width of a child widget.




Name: TheClickButton

Type: expression

Syntax:     the ( current ) click button

Summary: Determines the mouse button which started the mouse click.

Returns: The index of the mouse button which started the mouse click.

Example:
    variable tButton as integer
    put the click button into tButton

    if tButton is 1 then
        // do primary button action
    else
        // do secondary button action
    end if



Name: WidgetEnabledProperty

Type: operator

Syntax: 	the enabled of <mWidget>

Summary: Manipulates the enabled property of a child widget

mWidget: The child widget object

Example:
private variable mChild as Widget

public handler OnCreate() returns nothing
    put a new widget "com.livecode.widget.button" into mChild
    place mChild
    -- mChild is initially disabled
    set the enabled of mChild to false
end handler

Description:
Use the enabled property to control the disabled/enabled state of child widgets.
The child widget can change its appearance and behavior based on the result of the '<MyEnabled|my enabled>' expression.

References: MyDisabled (expression)




Name: WidgetHeightProperty

Type: operator

Syntax: 	the height of <mWidget>

Summary: Manipulates the height property of a child widget

mWidget: The child widget object

Example:
private variable mChild as Widget

public handler OnCreate() returns nothing
    put a new widget "com.livecode.widget.button" into mChild
    place mChild
end handler

public handler OnGeometryChanged() returns nothing
    -- ensure child widget remains same height as parent
    set the height of mChild to my height
end handler

Description: Use the height property to set the height of a child widget.




Name: WidgetDisabledProperty

Type: operator

Syntax: 	the disabled of <mWidget>

Summary: Manipulates the disabled property of a child widget

mWidget: The child widget object

Example:
private variable mChild as Widget

public handler OnCreate() returns nothing
    put a new widget "com.livecode.widget.button" into mChild
    place mChild
    -- mChild is initially disabled
    set the disabled of mChild to true
end handler

Description:
Use the disabled property to control the disabled/enabled state of child widgets.
The child widget can change its appearance and behavior based on the result of the '<MyDiabled|my disabled>' expression.

References: MyDisabled (expression)




Name: WidgetFontProperty

Type: operator

Syntax: 	the font of <Widget>

Summary: The font of a widget

Parameters: 

Widget: The widget to examine

Returns: A font handle for the widget's effective font

Description:
Return a font which reflects the current (effective) settings of
<Widget>'s LiveCode `textFont`, `textSize` and `textStyle` properties.

References: MyFont (expression)




Name: RedrawAll

Type: statement

Syntax:   redraw all

Summary: Redraws the widget.

Example:
private variable mColor as Color

public handler OnClick()
	put color [ any number, any number, any number ] into mColor
	redraw all
end handler

public handler OnPaint()
	...
	set the paint of this canvas to solid paint with color mColor
	...
end handler

Description: Use redraw all to redraw the widget, for example after setting a property which should trigger a change in appearance.

References: OnPaint(message)




Name: MyDisabled

Type: expression

Syntax:     my disabled

Summary: Returns the disabled state of the widget.

Returns: The disabled state of the widget.




Name: MyPaint

Type: expression

Syntax:     my ( foreground |             background |             highlight |             border |             top |             bottom |             shadow |             focus ) paint

Summary: Returns a particular paint of the widget.

Returns: The current setting of the specified paint of the widget.

Description:
Use 'my ... paint' to fetch the paint to use for the given theme
property of the widget. The returned paint will either be a solid
color, or a pattern depending on the effective color and pattern
properties of the widget's object.



Name: TheTouchLocation

Type: expression

Syntax:     the touch position

Summary: The location of the current touch

Returns: The position of the current touch relative to the widget

Example:
   variable tPosition as Point
   put the touch position into tPosition

   variable tRect as Rectangle
   put my bounds into tRect

   if tPosition is within tRect then
      // touch position is within the widget bounds
   end if



Name: MyScriptObject

Type: expression

Syntax:   my script object

Summary: Returns the widget script object.

Returns: The widget script object.




